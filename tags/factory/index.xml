<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>factory on stsnブログ</title>
    <link>https://satoshun.github.io/tags/factory/</link>
    <description>Recent content in factory on stsnブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Sun, 07 Apr 2019 06:04:22 +0000</lastBuildDate><atom:link href="https://satoshun.github.io/tags/factory/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dagger 2.22にFactoryクラスが導入されました</title>
      <link>https://satoshun.github.io/2019/04/dagger-component-factory/</link>
      <pubDate>Sun, 07 Apr 2019 06:04:22 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/04/dagger-component-factory/</guid>
      <description>Dagger 2.22からComponent.Factoryクラスが導入されました。この記事では、簡単な使い方とユースケースを見ていきたいと思います。
Component.Factoryとは? 実は、Component.FactoryでやれることはComponent.Builderクラスとほぼ変わりません。
例えば、次のArticlePresenterインスタンスを生成する2つのコードは本質的にやっていることは同等です。
// Factoryを使う場合 @Component interface AppComponent {  val presenter: ArticlePresenter   @Component.Factory  interface Factory {  fun create(  @BindsInstance id: Long  ): AppComponent  } }  val component = DaggerAppComponent  .factory()  .create(50) val presenter = component.presentere  ---  // Builderを使う場合 @Component interface AppComponent {  val presenter: ArticlePresenter   @Component.Builder  interface Builder {  @BindsInstance fun bindId(id: Long): Builder  fun build(): AppComponent  } }  val component = DaggerAppComponent  .</description>
    </item>
    
    <item>
      <title>Activity、Fragment、Viewにコンストラクタインジェクションする</title>
      <link>https://satoshun.github.io/2018/11/android_all_inject_ctor/</link>
      <pubDate>Fri, 16 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2018/11/android_all_inject_ctor/</guid>
      <description>Daggerライブラリを使い、Androidフレームワークが提供するActivityなどのクラスにコンストラクタインジェクションしたい、 そんな夢をみたAndroidエンジニアは数多くいると思います。
この記事ではそんな夢を叶える方法を紹介します。
サンプルコードはここにあります。
FragmentFactory Fragmentに依存関係を注入する時、普通にやると以下のコードになると思います。
class MainFragment : Fragment() {  @Inject lateinit var userHandler: UserHandler  ... } これをコンストラクタインジェクションにしたい。
class MainFragment @Inject constructor(  private val userHandler: UserHandler ) : Fragment() {  ... } androidx.fragment:fragment:1.1.0-alpha01から、FragmentFactoryが追加されました!! これを使うことでコンストラクタインジェクションが可能になります。
MainFragmentインスタンスを生成するFragmentFactoryを作成します。
class MainFragmentFactory @Inject constructor(  private val fragment: Provider&amp;lt;MainFragment&amp;gt; ) : FragmentFactory() {  override fun instantiate(  classLoader: ClassLoader,  className: String,  args: Bundle?  ): Fragment {  if (className == MainFragment::class.</description>
    </item>
    
  </channel>
</rss>
