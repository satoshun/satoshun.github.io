<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>materialcomponents on stsnブログ</title>
    <link>https://satoshun.github.io/tags/materialcomponents/</link>
    <description>Recent content in materialcomponents on stsnブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Tue, 24 Dec 2019 00:40:05 +0000</lastBuildDate><atom:link href="https://satoshun.github.io/tags/materialcomponents/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Material Components: ShapeableImageViewで丸く切り抜かれた画像を表示する</title>
      <link>https://satoshun.github.io/2019/12/material-shapeable-image-view/</link>
      <pubDate>Tue, 24 Dec 2019 00:40:05 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/12/material-shapeable-image-view/</guid>
      <description>Material androidの1.2.0-alpha03にShapeableImageViewが爆誕したのでそれの紹介です。
material-components-android/1.2.0-alpha03
ShapeableImageView? 名は体を表しており、shapeに対応したImageViewになります。shapeには丸やひし形などを設定することが可能です。
さっそくいじっていきたいと思います。
丸を設定してみる スタイルから定義する場合は、次のようにやります。
&amp;lt;!-- スタイル定義 --&amp;gt; &amp;lt;style name=&amp;#34;ShapeAppearance.Example.PILL&amp;#34; parent=&amp;#34;&amp;#34;&amp;gt;  &amp;lt;item name=&amp;#34;cornerFamily&amp;#34;&amp;gt;rounded&amp;lt;/item&amp;gt;  &amp;lt;item name=&amp;#34;cornerSize&amp;#34;&amp;gt;50%&amp;lt;/item&amp;gt; &amp;lt;/style&amp;gt;  &amp;lt;!-- レイアウト --&amp;gt; &amp;lt;com.google.android.material.imageview.ShapeableImageView  android:id=&amp;#34;@+id/circle&amp;#34;  android:layout_width=&amp;#34;200dp&amp;#34;  android:layout_height=&amp;#34;200dp&amp;#34;  android:layout_gravity=&amp;#34;center&amp;#34;  android:layout_margin=&amp;#34;10dp&amp;#34;  android:adjustViewBounds=&amp;#34;true&amp;#34;  android:elevation=&amp;#34;4dp&amp;#34;  app:shapeAppearanceOverlay=&amp;#34;@style/ShapeAppearance.Example.PILL&amp;#34;  app:srcCompat=&amp;#34;@drawable/img&amp;#34; /&amp;gt;  画像が丸くなっていることが分かると思います。cornerSizeを50%指定すると、ちょうど丸のshapeになります。
コードから設定する場合は、ShapeAppearanceModelを介して行います。
val model = ShapeAppearanceModel.builder().setAllCornerSizes(ShapeAppearanceModel.PILL).build() imageView.shapeAppearanceModel = model ひし形を設定してみる &amp;amp; strokeをつける スタイルから定義する場合は、次のようにやります。
&amp;lt;!-- スタイル定義 --&amp;gt; &amp;lt;style name=&amp;#34;ShapeAppearance.Example.Diamond&amp;#34; parent=&amp;#34;&amp;#34;&amp;gt;  &amp;lt;item name=&amp;#34;cornerFamily&amp;#34;&amp;gt;cut&amp;lt;/item&amp;gt;  &amp;lt;item name=&amp;#34;cornerSize&amp;#34;&amp;gt;50%&amp;lt;/item&amp;gt; &amp;lt;/style&amp;gt;  &amp;lt;!</description>
    </item>
    
    <item>
      <title>Material Components: ShapeとBottomSheetDialogとMaterialButton</title>
      <link>https://satoshun.github.io/2019/11/material-shape/</link>
      <pubDate>Tue, 26 Nov 2019 00:30:46 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/11/material-shape/</guid>
      <description>Shapeがmaterial androidの1.1.0-alpha01から実装されました。
Shapeとは、こんなやつです。
 参照: About shape
この記事では、BottomSheetDialogとMaterialButtonを参考に、Shapeをどのように設定するかを説明します。
より詳しい説明は公式ドキュメント/Shape.mdを参照してください。
まずはテーマを設定する Theme.MaterialComponentsを使う必要があります。
 Theme.MaterialComponents.Light Theme.MaterialComponents.DayNight  などをテーマに指定します。
&amp;lt;style name=&amp;#34;AppTheme&amp;#34; parent=&amp;#34;Theme.MaterialComponents.DayNight&amp;#34;&amp;gt; ... こんな感じです。
準備は終わったので、BottomSheetDialogにShapeを適用してみます。
BottomSheetDialogにShapeを指定していく （多分）大きく3つの指定方法があります。
 shapeAppearanceLargeComponentを指定する bottomSheetDialogThemeを指定する 独自でテーマを作り、BottomSheetDialogの引数などから与える  shapeAppearanceLargeComponentを指定する デフォルトだとBottomSheetDialogのスタイルとして、@style/Widget.MaterialComponents.BottomSheet.Modalを使うようになっています。
このスタイルの定義は、次のようになっています。
&amp;lt;style name=&amp;#34;Widget.MaterialComponents.BottomSheet.Modal&amp;#34; parent=&amp;#34;Widget.MaterialComponents.BottomSheet&amp;#34;&amp;gt; ...  &amp;lt;style name=&amp;#34;Widget.MaterialComponents.BottomSheet&amp;#34; parent=&amp;#34;Widget.Design.BottomSheet.Modal&amp;#34;&amp;gt;  ...  &amp;lt;item name=&amp;#34;shapeAppearance&amp;#34;&amp;gt;?attr/shapeAppearanceLargeComponent&amp;lt;/item&amp;gt;  ... &amp;lt;/style&amp;gt; shapeAppearanceに、?attr/shapeAppearanceLargeComponentが使われています。shapeAppearanceは、Shapeの設定を流し込む部分です。 なので、これを変えればBottomSheetDialogのShapeを変える事ができます。
たとえば、次のように設定してみます。
&amp;lt;style name=&amp;#34;AppTheme&amp;#34; parent=&amp;#34;Theme.MaterialComponents.DayNight&amp;#34;&amp;gt;  &amp;lt;!-- ?attr/shapeAppearanceLargeComponentの設定 --&amp;gt;  &amp;lt;item name=&amp;#34;shapeAppearanceLargeComponent&amp;#34;&amp;gt;@style/ShapeAppearance.Sample.LargeComponent&amp;lt;/item&amp;gt; &amp;lt;/style&amp;gt;  &amp;lt;style name=&amp;#34;ShapeAppearance.Sample.LargeComponent&amp;#34; parent=&amp;#34;&amp;#34;&amp;gt;  &amp;lt;item name=&amp;#34;cornerFamily&amp;#34;&amp;gt;cut&amp;lt;/item&amp;gt;   &amp;lt;!</description>
    </item>
    
    <item>
      <title>Material Components: MaterialTextViewでlineHeightがTextAppearanceから指定出来るようになりました</title>
      <link>https://satoshun.github.io/2019/07/material-textview/</link>
      <pubDate>Mon, 15 Jul 2019 03:09:15 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/07/material-textview/</guid>
      <description>従来のTextView（AppCompatTextView）では、lineHeightの指定をTextAppearanceから出来ませんでした。
それが、material-component 1.1.0-alpha08にMaterialTextViewが爆誕し、lineHeightがTextAppearanceから指定出来るようになりました🎉
使い方 まずはstyleを定義します。
&amp;lt;style name=&amp;#34;TextAppearance.LineHeight&amp;#34;&amp;gt;  &amp;lt;item name=&amp;#34;lineHeight&amp;#34;&amp;gt;20sp&amp;lt;/item&amp;gt; &amp;lt;/style&amp;gt; 次に、TextViewから指定します。
&amp;lt;TextView  android:layout_width=&amp;#34;wrap_content&amp;#34;  android:layout_height=&amp;#34;wrap_content&amp;#34;  android:text=&amp;#34;テスト&amp;#34;  android:textAppearance=&amp;#34;@style/TextAppearance.LineHeight&amp;#34; /&amp;gt; これで完了です😃
MaterialTextViewをXMLから直接指定してもいいのですが、AppCompatActivityを使っていれば、自動的にMaterialTextViewがinflateされるようになっています。 詳しくはMaterialComponentsViewInflater.javaをご覧下さい。
まとめ  material-component 1.1.0-alpha08にアップデートすると、自動的にMaterialTextViewが使われ、TextAppearanceからlineHeightが指定できる😃  </description>
    </item>
    
    <item>
      <title>Material Components: MotionSpecを使ってアニメーションをカスタマイズする</title>
      <link>https://satoshun.github.io/2019/04/fab-motion-spec/</link>
      <pubDate>Tue, 30 Apr 2019 05:59:41 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/04/fab-motion-spec/</guid>
      <description>MotionSpecはAndroid material componentsに定義されている1クラスになります。 MotionSpecを使うことで、次のアニメーション属性をカスタマイズすることができます。
 startOffset duration interpolator repeatCount repeatMode  例えば、アニメーションを長くしたいときは、durationの値を長く、アニメーションの開始時間を遅らせたいなら、startOffsetの値を長くします。
FloatingActionButtonを例に、実際にMotionSpecの値をいじってみます。
最初にMotionSpec用のanimator XMLを定義する デフォルトのXMLをコピペしてきて、それをベースにカスタマイズするのが良いと思います。
FloatingActionButton用のXMLはソースコードを読んでいくと、design_fab_show_motion_spec.xmlとdesign_fab_hide_motion_spec.xmlで定義されていることが分かります。MotionSpecは、show/hide用の2種類があり、カスタマイズしたいときは両方とも変更する必要があります。
まずはshow用のMotionSpecを変更していきます。以下がデフォルトで定義されているdesign_fab_show_motion_spec.xmlの中身になります。
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;!-- Copyright 2017 The Android Open Source Project Licensed under the Apache License, Version 2.0 (the &amp;#34;License&amp;#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &amp;#34;AS IS&amp;#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</description>
    </item>
    
  </channel>
</rss>
