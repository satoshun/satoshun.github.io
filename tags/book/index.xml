<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>book on stsnブログ</title>
    <link>https://satoshun.github.io/tags/book/</link>
    <description>Recent content in book on stsnブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Fri, 28 Dec 2018 05:27:13 +0000</lastBuildDate><atom:link href="https://satoshun.github.io/tags/book/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>感想: コーディングを支える技術</title>
      <link>https://satoshun.github.io/2018/12/coding_tech/</link>
      <pubDate>Fri, 28 Dec 2018 05:27:13 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2018/12/coding_tech/</guid>
      <description>「コーディングを支える技術」を読んだのでざっくりと感想。
比較、歴史から学ぶ
その機能はなにかの問題を解決するために導入されている 歴史から紐解くことでなぜそれが必要かが理解できる 言語によってどの問題を解決したいのかが違う Python: 同じようなコードになるような言語 C++: 高速に動作することを目指している エラー処理の進化
globalなエラーハンドリングはgotoと変わらない try catch finallyのように構造化されたエラー処理が誕生した Javaでは検査型例外、必ずerrorを処理しなければいけない設計 アドレスを覚えるのは人間には大変
人間はメソッド、変数を介することでアドレスを忘れることが出来た 結果、メソッド名、変数名をいかにしてわかりやすくするかが重要になってきた 基本的には何をするかというよりかは、何をさせないかで進化している
クラスによるポリモーフィズム 関数ポインタを直接触らないように gotoの禁止 構造化、モジュール化できなくなるので </description>
    </item>
    
    <item>
      <title>感想: オブジェクト指向設計実践ガイド ~Rubyでわかる 進化しつづける柔軟なアプリケーションの育て方</title>
      <link>https://satoshun.github.io/2018/12/object_oriented_practical_guide/</link>
      <pubDate>Tue, 25 Dec 2018 03:00:39 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2018/12/object_oriented_practical_guide/</guid>
      <description>オブジェクト指向設計実践ガイド ~Rubyでわかる 進化しつづける柔軟なアプリケーションの育て方を読んだのでざっくりと感想。
継承とコンポジションはトレードオフ
継承は自動的にaメッセージを委譲する 便利だが依存関係は強い 親クラスが変更されたときに、自動的に子クラスにも影響があることを意味する 継承は階層構造を生み出す ポリモーフィズムを実現する これまた便利だが依存関係は強い コンポジションは自動的に委譲しない 必要に応じて集約クラスで操る必要がある 依存は継承より少ない 単一責任について
あたりまえだけど守らないといけない 無駄な責務があると再利用できない 達成することで再利用可能な素晴らしいクラスが出来る 責任の依存先が不明なときは一旦privateとかに切り出しておいて未来に託す ダックタイピング
ダックにより、具体的なGearクラスからロールへのマインドシフトが出来る ロールを満たすことにより要件を満たす 実装には依存しない、メッセージを送るだけで良い世界はOOPの真骨頂 依存関係について
依存関係の向きを考えるのは大切 例えばコンストラクタ内で依存するのと、インスタンスメソッドだと距離が違う。コンストラクタ内で依存したほうが良い さらに進めるとDI，コンストラクタの外から注入する 依存関係逆転の法則 低レイヤーに依存するのではなく、インターフェースに依存しておいて、あとから実装を注入することで達成 domain層などの他の層に依存したくない層で有効 柔軟なインターフェース
オブジェクトを信じるようなインターフェース どのようにするかではなく、何をするかをメソッド名にする。宣言的に 安定していなければいけない </description>
    </item>
    
    <item>
      <title>感想: Androidアプリ設計パターン入門</title>
      <link>https://satoshun.github.io/2018/03/android-architecture-started/</link>
      <pubDate>Fri, 02 Mar 2018 00:28:00 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2018/03/android-architecture-started/</guid>
      <description>Androidアプリ設計パターン入門を読んだのでざっくりと感想。
https://peaks.cc/books/architecture_patterns
感想 MVP PresenterがViewとModelへの仲介役なので、Presenterはどうしてもfatになりそう PresenterでView、Modelが何を出来るかを知らなければならない Contractみたいなインタフェースを切るのは好き それを見ただけで何をそのページでやっているのかが掴めるので PresenterはContextを知らなく良い、Pure Javaなのでテスタブルだし綺麗になりそう MVVM 個人的にはMVPより好き ViewModelがViewの参照を持たなくて良いので少しスッキリする ただViewへの参照がないだけで、LiveDataなりObservableFieldに値を書き出すので実質的にはViewがどんなことをしたいか知っているから同等といえば同等 Viewへの参照を持たないので、AACのViewModelへの適合性は高いと思う DataBindingのObservableFieldとかを使わない前提。使うとViewへの参照を持ってメモリリークしちゃう Flux 単一方向データフローは凄い良いと思う 単一方向はFluxだけに限らないけど、Fluxを象徴する1つの特徴 ViewModelとかPresenterって処理が集中する傾向にあると感じていて、FluxだとStore、ActionCreatorって形で切り出せるから良い FluxもAACとの相性は良いと思う 負債の話 負債に対する解決策の1つとしてReact Nativeを出すのは発想として凄いと思ったし、そういう解決方法もあるのかと思った メモ データ層の抽象化に関してはRepository的なものを作るで良さそう データ側はRx、UI側に反映する時はLiveDataが良さそう </description>
    </item>
    
    <item>
      <title>読んだ: 達人に学ぶDB設計 徹底指南書</title>
      <link>https://satoshun.github.io/2015/03/master_of_database/</link>
      <pubDate>Wed, 18 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2015/03/master_of_database/</guid>
      <description>この記事には僕の主観, 解釈が入っています. 本のまとめというよりかは, 感想的なものです.
データベースを制する者はシステムを制す システムを構築する時に, 要件定義をし, どのようにデータが必要, 保持するかを決定することはとても大切です. 拡張性が高く, 正しいデータ設計をすると, 要件修正があった時にも, 大きな変更をすることはありません. データ中心のアプローチは現在の主流です.
view(外部スキーマ)とmodel(論理スキーマ)を分離しておくことも大切です. 論理スキーマを正規化などの技術を使い, リレーショナル・データベースの基本に沿った設計をすることで, 外部スキーマで柔軟に組み合わせて使用することが出来ます.
論理設計と物理設計 論理設計は物理設計に先立って行われる必要があり, 論理設計は物理設計とは独立して設計することが出来ます.
論理設計では, エンティティ抽出が行われます. エンティティは要件定義に基づいて行われます. 例えば, 要件「ユーザがブログを投稿できる」があったとしたら，ユーザとブログがエンティティとして抽出できます. そして, 各エンティティがどのような属性(列)を持っているかを定義して, どのような関係(1対多になっているかなど)になっているかをER図などで示します.
物理設計では, パフォーマンス, キャパシティの2つの要素が仕様を満たすようにすることが大切です. キャパシティは, データファイル, インデックスファイル, システムファイル, 一時ファイル, ログファイル(トランザクション履歴的なもの)の5つのファイルがあり, それぞれのファイルがどれくらいのサイズになるかを見積もります. パフォーマンスは, TPS(Transaction Per Second)のスループットがどれくらい出れば良いかを設定し, CPU, メインメモリを見積もります.
冗長設計(RAID, レプリケーション), バックアップ設計(フル, 差分, 増分バックアップ)をし, 不測の事態でもデータがなくならないようにすることも大切です.
論理設計と正規化 ～なぜテーブルは分割する必要があるのか？ 正規化は, テーブルをどのように定義すればいいかのプラクティスです. 正規化をすることでデータの重複を防ぎ, データサイズを小さくし, データ不整合を防ぐことが出来ます. 正規化はRDSにおける, リファクタリングのような感じです.
正規化には, 第5まであります. テーブルを分割することで, データの重複を除去していきます. 詳しくはこちらが分かりやすいです.
まとめると, 正規化メリットは
データの重複を防ぐ データサイズを小さく保つことが出来る 正規化のノウハウは広く共有されているので, 他の人にも分かりやすいテーブル設計になりやすい ER図 ～複数のテーブルの関係を表現する 正規化をすると, 必然的にテーブルが増加していきます.</description>
    </item>
    
    <item>
      <title>読んだ: Web API: The Good Parts</title>
      <link>https://satoshun.github.io/2015/03/webapi_the_good_parts/</link>
      <pubDate>Sun, 15 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2015/03/webapi_the_good_parts/</guid>
      <description>この記事には, 僕の主観, 解釈が入っています. 本のまとめというよりかは感想的なものです.
Web APIとは何か 使いやすく, 理解しやすく, 拡張性が高く設計する必要があります.
使いやすく: クライアントが苦労しない, 素直な実装が出来る 理解しやすく: 「エンドポイントが明確」, 「Twitterなどの他のWeb APIを参考にし, 慣習に従っている」. 拡張性が高く: インターフェースの変更はクライアントに影響するため, バージョニングなどを使うなど, クライアントに影響を与えにくい設計になっている 一般に公開するLSUD(Large Set of Unknown Developers)と, 自社内のサービスで使う, SSKD(Small Set of Unknown Developers)のどちらの用途で使うかで大きく2つに分けることが出来ます. SSKDの場合は, クライアントのコントロールがしやすいので, 世間の常識から外れた設計をしても大きな問題にはなりませんが, 理解のしやすさ がなくなってしまうので, SSKDでもちゃんとした設計をする必要があります.
エンドポイントの設計とリクエストの形式 HTTPにおける, エンドポイントはURIになります. URIはリソースを示します. 例えば, http://localhost/users なら, ホストlocalhostのユーザ一覧を指し示しています. さらに, ユーザIDが2のユーザを取得したいときは, http://localhost/users/2 とすれば直感的です. さらにさらに, ユーザIDが2のユーザの投稿一覧を取得したいときは, http://localhost/users/2/posts とすれば, 直感的です.
ここで, 上記の例ではデータを取得することにだけ, 注目していましたが, データを消去したい, 更新したいなどの機能も当然必要です. HTTPでは, methodを指定することで, それらの機能使い分けることが出来ます. よく使うmethodには, データを取得するGET, データを登録するPOST, データを更新するPUT, データを消去するDELETEがあります. 例えば, DELETE http://localhost/users/2 とすれば, ユーザIDが2のユーザを削除することが期待でき, PUT http://localhost/users/2 とすれば, ユーザIDが2のユーザの情報を更新することが期待されます.</description>
    </item>
    
  </channel>
</rss>
