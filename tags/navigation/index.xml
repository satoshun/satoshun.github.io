<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>navigation on stsnブログ</title>
    <link>https://satoshun.github.io/tags/navigation/</link>
    <description>Recent content in navigation on stsnブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Sat, 30 Nov 2019 06:14:19 +0000</lastBuildDate><atom:link href="https://satoshun.github.io/tags/navigation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>メモ Android: Navigation Component &#43; Toolbar(ActionBar)周りのコードを読んで見る</title>
      <link>https://satoshun.github.io/2019/11/navigation-toolbar-internal-code/</link>
      <pubDate>Sat, 30 Nov 2019 06:14:19 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/11/navigation-toolbar-internal-code/</guid>
      <description>Navigation Component + Toolbarのデフォルトの挙動をカスタマイズしたかったので、その周辺のコードを読んでみたメモブログになります。
この記事のコードは、次のライセンスに従います。
/*  * Copyright 2018 The Android Open Source Project  *  * Licensed under the Apache License, Version 2.0 (the &amp;#34;License&amp;#34;);  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an &amp;#34;AS IS&amp;#34; BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</description>
    </item>
    
    <item>
      <title>Android: Navigationのdialogタグ周りのコードちょっと読んでみた</title>
      <link>https://satoshun.github.io/2019/11/navigation-dialog-internal-code/</link>
      <pubDate>Sat, 09 Nov 2019 06:23:13 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/11/navigation-dialog-internal-code/</guid>
      <description>Navigation Component 2.1.0からdialogタグが使えるようになりました。 どんな感じで処理をしているのか気になったので、ざっくりとメモ書き。
1. abstract Navigatorクラス このクラスは最終的にどのように、対象クラスをnavigateされるかを決めるクラスです。 Activityなら、ActivityNavigator。FragmentならFragmentNavigatorが使われます。 dialogの場合は、DialogFragmentNavigator経由でdialogが発火するようになっています。
2. NavInlaterでdialogタグの場合、DialogFragmentNavigatorを使うようにしている NavInflaterは単純なXMLパーサーになっています。&amp;lt;dialog &amp;hellip;&amp;gt; を発見したら、DialogFragmentNavigatorからNavDestinationを作成するようになっています。 このNavDestinationは実際にコールされるときに、DialogFragmentNavigatorを呼び出すような仕組みなっています。
3. DialogFragmentNavigatorの中身 一部分を抜粋します。
/* * Copyright 2019 The Android Open Source Project * * Licensed under the Apache License, Version 2.0 (the &amp;#34;License&amp;#34;); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an &amp;#34;AS IS&amp;#34; BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</description>
    </item>
    
    <item>
      <title>マルチモジュールの遷移について考える Part2</title>
      <link>https://satoshun.github.io/2019/02/multi-module_transition_part2/</link>
      <pubDate>Fri, 15 Feb 2019 00:14:56 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/02/multi-module_transition_part2/</guid>
      <description>マルチモジュール遷移方法Part2です。Part1はここになります😌
Part2では、Navigation Componentを使うパターンを考えてみます。今回はDynamic Feature(DFM)には触れません。いわゆる一般的なライブラリモジュールでの遷移になります。
また、今回の検証に用いたコードはsatoshun/MultiModuleNavigationComponentExampleにあります。
モジュール構成について 細かい実装に入る前に、全体的なモジュール構成を説明します。今回はappモジュールがトップにあり、2つのfeatureモジュールがあるとします。
 各featureモジュールでは遷移用インターフェースを持っており、それを用いて他のfeature画面へ遷移をします。遷移用インターフェースの実装はapp内のrouterモジュールで行います。
このモジュール構成のポイントは、各featureモジュール内で自身が使う遷移インターフェースを定義し、appがそのインターフェースの実装を行う点です。このようにすることで、feature間で直接の依存を持つことを防ぐことができます。これは循環依存を避けるためです。
では、実装に入っていきます。今回はDagger2を使って実装をします。
featureモジュール側の遷移用インターフェースの定義 前述の図の通り、各featureモジュール内で遷移用のインターフェースを定義します。ここでは、featureモジュール内で使用するインターフェースを定義します。
main画面からsub1画面に移動したいとします。次のようなインターフェース定義になります。
interface MainModuleRouter {  // sub1画面へ移動する  fun routeToSub1() } Mainモジュール用のインターフェースなので、MainModuleRouterという名前にし、sub1画面へ遷移するためのメソッドを定義しています。
そしてこのインターフェースを、MainFragmentで使います。
class MainFragment : Fragment() {  @Inject lateinit var moduleRouter: MainModuleRouter   ...   override fun onViewCreated(view: View, savedInstanceState: Bundle?) {  super.onViewCreated(view, savedInstanceState)   view.findViewById&amp;lt;View&amp;gt;(R.id.route).setOnClickListener {  moduleRouter.routeToSub1()  }  } } これでfeatureモジュールでの遷移用インターフェースの定義は完了です。
次にこのインターフェースの実装をします。
routerモジュール側の遷移用インターフェースの実装 今回は、遷移用インタフェースの実装をrouterモジュールで行います。まずは、Navigation Componentを用いて、Graphを作ります。
&amp;lt;navigation xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;  xmlns:app=&amp;#34;http://schemas.</description>
    </item>
    
    <item>
      <title>Android: Navigationのsafeargs Gradle pluginだけを使ってもいいかもしれない</title>
      <link>https://satoshun.github.io/2018/05/navigation-only_use_safe_args/</link>
      <pubDate>Sun, 20 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2018/05/navigation-only_use_safe_args/</guid>
      <description>Google I/O 2018でJetpackが登場し、新たにNavigationライブラリが導入されました。 ざっくりと説明すると、画面の遷移の実装を助けるライブラリになっています。実装的には、FragmentTransactionを直接いじることがなくなるといったメリットがあります。
このライブラリの機能に、safeargsというものがあります。これが便利で、最初はこの機能だけを使うのもいいのでは? と思っているのでその紹介です。
safeargsを使ってみる 一般的にFragmentに適当な値を渡すときはBundleを通して渡します。
// 呼び出し側 val bundle = Bundle() bundle.putInt(&amp;#34;step&amp;#34;, 10)  // 呼び出され側 val step = arguments?.getInt(&amp;#34;step&amp;#34;) これの問題点としては、typesafeで無いところです。例えばリファクタリングなどで、片方の文字列を&amp;quot;step2&amp;quot;にしてしまうと、ランタイムエラーになります。
これを解決にするためにNavigationではsafe argsという機能を提供しています。 これは、DataBindingのように、クラスを生成することでtypesafeを実現します。
&amp;lt;navigation xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;  xmlns:app=&amp;#34;http://schemas.android.com/apk/res-auto&amp;#34;  xmlns:tools=&amp;#34;http://schemas.android.com/tools&amp;#34;&amp;gt;  &amp;lt;fragment  android:name=&amp;#34;com.example.android.codelabs.navigation.HogeFragment&amp;#34;  android:label=&amp;#34;Hoge&amp;#34;&amp;gt;   &amp;lt;argument  android:name=&amp;#34;step&amp;#34;  app:type=&amp;#34;integer&amp;#34;  android:defaultValue=&amp;#34;1&amp;#34;/&amp;gt;  &amp;lt;/fragment&amp;gt; &amp;lt;/navigation&amp;gt; とnavigationを記述すると、
public class HogeFragmentArgs {  private int step = 1;   private HogeFragmentArgs() {  }   public static HogeFragmentArgs fromBundle(Bundle bundle) {  HogeFragmentArgs result = new HogeFragmentArgs();  if (bundle.</description>
    </item>
    
  </channel>
</rss>
