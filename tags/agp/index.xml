<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>agp on stsnブログ</title>
    <link>https://satoshun.github.io/tags/agp/</link>
    <description>Recent content in agp on stsnブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Sat, 10 Apr 2021 01:13:45 +0000</lastBuildDate><atom:link href="https://satoshun.github.io/tags/agp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Android: BuildConfigの生成をoffにする</title>
      <link>https://satoshun.github.io/2021/04/android-buildconfig/</link>
      <pubDate>Sat, 10 Apr 2021 01:13:45 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2021/04/android-buildconfig/</guid>
      <description>buildFeaturesから、BuildConfigクラスの生成をするかどうかを設定できるようになりました。
gradle.propertiesから設定できます。
android.defaults.buildfeatures.buildconfig=false # defaultはtrue マルチモジュール構成のプロジェクトでは、基本的にはBuildConfigを生成しないと思うので、BuildConfigの生成のデフォルト設定をoffにしておくと良いと思います。
モジュール単位で、生成をonにするには、build.gradleに次の記述をします。
android { buildFeatures { buildConfig true } } buildFeaturesブロックから設定を与えることが出来ます。
まとめ マルチモジュール構成のプロジェクトの場合は、coreモジュールやappモジュールのみonにして、他をoffにするのが良さそう</description>
    </item>
    
    <item>
      <title>Android Studio: Firebaseなどのクラッシュログから関数ジャンプできるようにする</title>
      <link>https://satoshun.github.io/2019/10/analyze-stack-trace/</link>
      <pubDate>Tue, 29 Oct 2019 01:32:36 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/10/analyze-stack-trace/</guid>
      <description>Android Studio: Debugging Tips n&amp;rsquo; Tricks (Android Dev Summit &amp;lsquo;19)で、便利な機能があったので、それの紹介です。
テキスト形式のクラッシュログを、Android Studio上で関数ジャンプ出来るようになります。 Firebaseのクラッシュログを例にして説明してきます。
まず、 Firebaseからクラッシュログをコピーします。
次に、Android StudioのAnalyze Stack Trace or Thread Dumpを使い、さきほどコピーしたクラッシュログをペーストします。
そうすると、Android Studio上で、関数ジャンプが出来るようになります！</description>
    </item>
    
    <item>
      <title>Android Gradle Plugin 4.0でjava.timeがバックポートされるようになりました</title>
      <link>https://satoshun.github.io/2019/10/desugar-java-time/</link>
      <pubDate>Sat, 26 Oct 2019 02:21:55 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/10/desugar-java-time/</guid>
      <description>Java 8 library desugaring in D8 and R8で、desugarがA subset of java.timeに対応したとのことで、ThreeTenABPが置き換えられるのでは？と思い、ウキウキで試してみました。
環境は com.android.tools.build:gradle:4.0.0-alpha01になります。
セットアップ build.gradleに、coreLibraryDesugaringEnabledを追加します。
compileOptions { sourceCompatibility JavaVersion.VERSION_1_8 targetCompatibility JavaVersion.VERSION_1_8 coreLibraryDesugaringEnabled true } これで完了です。
java.timeのAPIを呼び出してみる 29, 21のエミュレーターで次のコードを試したところ、クラッシュすることなく、無事に実行することが出来ました！
// Instant API val date = Date() val instant = date.toInstant() binding.instant.text = instant.epochSecond.toString() // ZoneId API val zoneId = ZoneId.systemDefault() binding.zoneId.text = zoneId.id println(instant.atZone(zoneId).dayOfMonth) println(instant.atZone(zoneId).month) // LocalDate API val now = LocalDate.now() binding.localDate.text = now.dayOfMonth.toString() println(now.dayOfMonth) // ZoneOffset API val zoneOffset = ZoneOffset.</description>
    </item>
    
    <item>
      <title>Android: namespacedRClassフラグでRクラスを小さく保つ</title>
      <link>https://satoshun.github.io/2018/12/namespacedrclass/</link>
      <pubDate>Sun, 09 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2018/12/namespacedrclass/</guid>
      <description>Android Gradle Plugin（以下AGP）3.3のalphaのどこかのタイミングでnamespacedRClassフラグが新しく追加されたので紹介します。 本記事では3.4.0-alpha07で試しました。
まず現状の問題点として、ライブラリモジュールのRクラスのサイズが大きくなる課題があります。それは、ライブラリのRクラスは依存関係にあるRクラスがどんどんマージされていくためです。 それを解決するためにnamespacedRClassが追加されました。使い方は簡単で、次の記述をgradle.propertiesに追加するだけです。
android.namespacedRClass=true では、これからこのフラグがtrueとfalseでどのようにRクラスの内容が変わるか見ていきます。 例として、appcompatに依存しているライブラリモジュールを用意します。
まずは、namespacedRClass=falseの時のRクラスです。
public final class R { private R() {} public static final class anim { private anim() {} public static final int abc_fade_in = 0x7f010000; public static final int abc_fade_out = 0x7f010001; public static final int abc_grow_fade_in_from_bottom = 0x7f010002; public static final int abc_popup_enter = 0x7f010003; ... ... 依存関係にあるappcompatのRクラスの内容が含まれていることが分かります。
では次に、namespacedRClass=trueの時です。
public final class R { private R() {} public static final class color { private color() {} public static final int red3 = 0x7f04004b; } public static final class id { private id() {} public static final int title = 0x7f0700b1; } public static final class layout { private layout() {} public static final int base3 = 0x7f09001d; } public static final class string { private string() {} public static final int base_string3 = 0x7f0b002a; } } このモジュールで定義したリソースの内容しか含まれていないことが分かります。appcompatのRクラスは含まれていません。 ライブラリモジュールのRクラスのサイズがかなり小さくすることが出来ました!</description>
    </item>
    
  </channel>
</rss>
