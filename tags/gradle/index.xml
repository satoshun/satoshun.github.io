<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gradle on stsnブログ</title>
    <link>https://satoshun.github.io/tags/gradle/</link>
    <description>Recent content in gradle on stsnブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Sun, 27 Feb 2022 11:42:50 +0000</lastBuildDate><atom:link href="https://satoshun.github.io/tags/gradle/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Gradle: Typesafe project dependencies</title>
      <link>https://satoshun.github.io/2022/02/gradle-typesafe-accessor/</link>
      <pubDate>Sun, 27 Feb 2022 11:42:50 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2022/02/gradle-typesafe-accessor/</guid>
      <description>Type-safe project dependenciesの紹介ブログです。Gradle 7.4で試しています。
Gradleでマルチモジュールプロジェクトを構成すると、例えば、プロジェクトlibAへの依存は、次のようにう書くことが出来ます。
// app/build.gradle.kts  dependencies {  implementation(project(&amp;#34;:libA&amp;#34;))  ... } この際に、projectで指定している :libA の部分は文字列なのでtypesafeではなく、補完などが効きにくいです。(最近のIntelliJ、Android Studioだと補完が効いたりします)
ここで、今回紹介する Type-safe project dependenciesを使うと、次のように書くことが出来ます。
// settings.gradle enableFeaturePreview(&amp;#34;TYPESAFE_PROJECT_ACCESSORS&amp;#34;) // app/build.gradle.kts  dependencies {  implementation(projects.libA)  ... } projectsから、プロジェクトlibA参照出来るようになり、補完がいい感じに効きます。
まとめ Gradle 7.4段階では、まだFeature Previewですが、ktsと相性が良い技術になっています。 ktsを入れているようなプロジェクトの場合は、導入を検討するのも良いかもしれません。
参考  https://docs.gradle.org/7.4/userguide/declaring_dependencies.html#sec:type-safe-project-accessors  </description>
    </item>
    
    <item>
      <title>Gradle Profilerを使って、ビルドを最適化する</title>
      <link>https://satoshun.github.io/2022/02/gradle-profile-build/</link>
      <pubDate>Sun, 06 Feb 2022 03:39:04 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2022/02/gradle-profile-build/</guid>
      <description>開発を高速化するために、ビルド速度を改善することは重要です。 Gradleの設定を見直すことで、ビルド速度を改善できる可能性があります。
この記事では、Gradle Profilerを使って、自分の環境において最適そうな設定を見つける方法を紹介します。
Gradle Profilerとは? Gradle Profiler は、Gradleのプロファイリング、ベンチマークを計測してくれるツールです。
Gradle Profilerを使うことで、最適なGradleの設定を見つけだすことが出来ます。
良さそうな設定を見つける まず、最初にシナリオファイルを作成します。これは、Gradle Profilerを実行する際に必要なファイルで、記述したシナリオ通りに実行してくれます。
今回は、次のようなシナリオを作りました。
# scenario.txt clean_build_2gb_2workers {  tasks = [&amp;#34;:app:assembleDebug&amp;#34;]  gradle-args = [&amp;#34;--max-workers=2&amp;#34;]  jvm-args = [&amp;#34;-Xmx2048m&amp;#34;]  cleanup-tasks = [&amp;#34;clean&amp;#34;] }  clean_build_4gb_4workers {  tasks = [&amp;#34;:app:assembleDebug&amp;#34;]  gradle-args = [&amp;#34;--max-workers=4&amp;#34;]  jvm-args = [&amp;#34;-Xmx4096m&amp;#34;]  cleanup-tasks = [&amp;#34;clean&amp;#34;] } このシナリオでは、worker数と、メモリの値をそれぞれ設定しています。
このシナリオは、Gradle Profilerコマンドを使って、次のように実行できます。
gradle-profiler --benchmark --project-dir . --scenario-file scenarios.txt これを実行すると、ビルドにどれくらい時間が掛かったかの出力してくれます。
   この結果から、僕の環境 + このプロジェクトの場合、2GB、2workerよりも4GB、4workerで設定したほうが良さそうなことが分かります。</description>
    </item>
    
    <item>
      <title>Gradle: 様々なバージョン管理の方法</title>
      <link>https://satoshun.github.io/2022/01/gradle-dependency-version-definition/</link>
      <pubDate>Tue, 25 Jan 2022 12:53:58 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2022/01/gradle-dependency-version-definition/</guid>
      <description>Android開発では、Gradleを使ってビルド環境を構築します。その中で、バージョンを管理する必要があります。 Gradleでは、いろいろなバージョンの管理方法があるので、色々と紹介したいと思います。
1. バージョン管理しない管理方法 パワー系の管理方法です。 小規模なプロジェクトや、個人プロジェクトなどは、シングルモジュールな構成であったりと、そもそもバージョンを管理する必要がない場合があります。
具体的には、build.gradle(.kts)にベタ書きします。
dependencies {  implementation &amp;#34;com.google.android.material:material:1.4.0&amp;#34;  ... } バージョン管理をしない、バージョン管理方法です。これだと、マルチモジュール環境などで、辛くなるので進化させる必要があります。
2. dependencies.gradleに定義する dependencies.gradleファイルを定義し、そこでバージョンを管理する方法です。 ファイル名はなんでもいいのですが、dependencies.gradleという命名が多いような気がします。
具体的には、dependencies.gradleに依存を定義し、それをbuild.gradleで読み込んで使います。
// dependencies.gradle ext {  material = &amp;#34;com.google.android.material:material:1.4.0&amp;#34;  ... } // build.gradle apply from: rootProject.file(&amp;#39;dependencies.gradle&amp;#39;) // app/build.gradle dependencies {  implementation rootProject.ext.kotlinStdlib } 参考コード: https://github.com/JakeWharton/RxBinding/tree/version-one
また、わざわざdependencies.gradleにファイルを分けないで、build.gradleに直接書くことも出来ます。
// build.gradle buildscript {  ext.versions = [  &amp;#34;material&amp;#34;: &amp;#34;com.google.android.material:material:1.4.0&amp;#34;  ] } 参考コード: https://github.com/JakeWharton/RxBinding
3. buildSrcを使う buildSrcディレクトリを使い、バージョンの管理をする方法です。 GradleではbuildSrcは特別なディレクトリになっており、ビルド実行時に自動で中身を読み込みます。
具体的には、次のようになります。今回は、kotlinでバージョンを管理してみます。
// buildSrc/src/main/java/Dep.</description>
    </item>
    
    <item>
      <title>Android: non-transitive Rの導入と、ビルド時間の変化について</title>
      <link>https://satoshun.github.io/2021/11/android-non-transitive-r/</link>
      <pubDate>Sun, 14 Nov 2021 01:58:16 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2021/11/android-non-transitive-r/</guid>
      <description>non-transitive Rというオプションがあり、これを有効にすると、マルチモジュールなプロジェクトでのビルド時間の改善が期待できます。
この記事では、non-transitive R対応の仕方と、どれくらいビルド時間が向上したかについて紹介したいと思います。
non transitive R対応の仕方 比較的新しいAndroid Studio（4.2以降?）を使っているなら、Refactor機能から変換することが出来ます。
Refactor &amp;gt; Migrate to Non-transitive R Classes.
この機能を使うと、各モジュールのRファイル参照が、フルパッケージ名参照に置換されます。
擬似コードだとこんな感じです。
// before import jp.hoge.sample.R  class HogeFragment(R.layout.hoge_layout) { }  // after class HogeFragment(jp.hoge.sample.R.layout.hoge_layout) { } non-transitve Rを有効にすると、各モジュールで、Rファイルのマージ?のようなタスクが行われなくなり、Rの参照先が変わるためです。
動作自体は上記のコードでも問題なく出来ます。ただ、フルパッケージ指定が気になるなら、import aliasまたは、typealiasを使うことで解決できます。
擬似コードだとこんな感じです。
// import alias import jp.hoge.sample.R as SampleR  class HogeFragment(SampleR.layout.hoge_layout) { }  // typealias typealias SampleRLayout = jp.hoge.sample.R.layout  class HogeFragment(SampleRLayout.hoge_layout) { } non-transitive R対応はこれで完了です。
どれくらい速度向上があったか? 前提として、CI上で計測したので、ローカル環境とは異なります。
計測には、Gradle-Profilerを使い、applicationモジュールのファイルが変更された時の、インクリメンタルビルド時間の変化について、計10回反復し測定しました。
結果、おおよそ20%程度の速度向上が見られました。R参照がフルパッケージになるなど、多少不便な点はありますが、十分に導入する価値があると感じました。
まとめ マルチモジュールな環境で、大きなプロジェクトなら導入するのを検討するのが良いと感じました。 また、Refactor機能が賢いので、導入にもそう手間は掛からないと思います。</description>
    </item>
    
    <item>
      <title>Android: BuildConfigの生成をoffにする</title>
      <link>https://satoshun.github.io/2021/04/android-buildconfig/</link>
      <pubDate>Sat, 10 Apr 2021 01:13:45 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2021/04/android-buildconfig/</guid>
      <description>buildFeaturesから、BuildConfigクラスの生成をするかどうかを設定できるようになりました。
gradle.propertiesから設定できます。
android.defaults.buildfeatures.buildconfig=false # defaultはtrue マルチモジュール構成のプロジェクトでは、基本的にはBuildConfigを生成しないと思うので、BuildConfigの生成のデフォルト設定をoffにしておくと良いと思います。
モジュール単位で、生成をonにするには、build.gradleに次の記述をします。
android {  buildFeatures {  buildConfig true  } } buildFeaturesブロックから設定を与えることが出来ます。
まとめ マルチモジュール構成のプロジェクトの場合は、coreモジュールやappモジュールのみonにして、他をoffにするのが良さそう</description>
    </item>
    
    <item>
      <title>Gradle: 新しいバージョン管理方法 Central declaration of dependenciesの紹介</title>
      <link>https://satoshun.github.io/2021/03/gradle-central-declaration-of-dependencies/</link>
      <pubDate>Sun, 28 Mar 2021 06:48:44 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2021/03/gradle-central-declaration-of-dependencies/</guid>
      <description>Gradleの7.0-RC01に、Central declaration of dependenciesという機能が入りました。まだ、experimentalな機能で今後どうなるか分かりませんが、気になったので紹介します。
この記事を書くのに使ったサンプルコードは github/satoshun-android-example にあります。
Central declaration of dependenciesが導入された背景 Gradle 7.0 Release Notes に次のように書いてあります。
There are a number of ways to share dependency versions between projects in multi-project builds. For example, users can declare versions or dependency coordinates directly in build scripts (in the ext block), external files (e.g dependencies.gradle), in buildSrcor even dedicated plugins. There wasn’t, however, any standard mechanism to do this which would combine the advantages of each approach.</description>
    </item>
    
    <item>
      <title>Gradle: BOMを使って依存を指定する</title>
      <link>https://satoshun.github.io/2020/02/gradle-bom-android/</link>
      <pubDate>Tue, 18 Feb 2020 13:08:10 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2020/02/gradle-bom-android/</guid>
      <description>Gradleの5から、Bill Of Materials(BOM)が使えるようになりました。これが、結構いいものだと思ったので紹介します。
ついでにdependabotの話もちょっとします。
BOM? BOMを使うことで、 複数のライブラリのバージョンを省略することが出来ます。
ドキュメントの例にはspring-bootが挙げられています。
dependencies {  // import a BOM  implementation platform(&amp;#39;org.springframework.boot:spring-boot-dependencies:1.5.8.RELEASE&amp;#39;)   // define dependencies without versions  implementation &amp;#39;com.google.code.gson:gson&amp;#39;  implementation &amp;#39;dom4j:dom4j&amp;#39; } gson、dom4jのバージョンを省略していることが分かると思います。
Androidでよく使うライブラリでBOMに対応しているライブラリには、例えば次があります。
 OkHttp Kotlin Coroutine Firebase  例えば、OkHttpならこんな感じで書けます。
dependencies {  implementation platform(&amp;#34;com.squareup.okhttp3:okhttp-bom:4.4.0&amp;#34;)  implementation &amp;#34;com.squareup.okhttp3:okhttp&amp;#34;  implementation &amp;#34;com.squareup.okhttp3:logging-interceptor&amp;#34; } BOMを使うことで、関連ライブラリをまとめてアップデートすることが出来るのでとても便利です。
dependabot? 直接はBOMに関係ないんですけど、最近、dependabotが便利だと自分の中で話題になっていて、これはライブラリのアップデートを自動でやってくれるbotになります。
例えば、こんな感じのPRを作ってくれます。
Bump versions.retrofit from 2.7.0 to 2.7.1
   それでdependabotって、versions.retrofit = &#39;2.7.1&#39;って感じで、変数で定義すると検知できないって思っていたんですけど、 いろいろ試してみたら、普通に出来ました:D</description>
    </item>
    
    <item>
      <title>Android マルチモジュール: Gradle周りで便利だと思う設定</title>
      <link>https://satoshun.github.io/2019/11/multi-module-gradle-properties/</link>
      <pubDate>Mon, 11 Nov 2019 00:50:18 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/11/multi-module-gradle-properties/</guid>
      <description>マルチモジュールなアプリを作ることをテーマにブログを書いていこうの、2本目です。
1本目はこちらになります。
 Android マルチモジュール: ライブラリのバージョン管理について  今回は、マルチモジュール環境における、Gradle周りの便利であろう設定について、次の4つを紹介します。
 モジュール内のリソース名にルールを持たせる BuildConfigを作らない モジュール内でProGuard/R8の設定をする Rファイルを小さく保つ  モジュール内のリソース名にルールを持たせる resourcePrefixは、リソース名のプレフィックスにルールを設けるプロパティです。
例えば、次のように書くと、このモジュール内のリソース（レイアウト、Drawable、Stringなど）はhome_から始まる必要があります。
// build.gradle android {  ...  resourcePrefix &amp;#39;home_&amp;#39; }  // strings.xml &amp;lt;resource&amp;gt;  // home_から始まる必要がある  &amp;lt;string name=&amp;#34;home_app_name&amp;#34;&amp;gt;適当な文字列&amp;lt;/string&amp;gt; &amp;lt;/resource&amp;gt; これを定義することで、名前のコンフリクトを防ぐことが出来ます。また、名前からリソースがどのモジュールで定義されているかを推測すること出来ます。
BuildConfigを作らない モジュールのBuildConfigの生成を無効にすることが出来ます。例えば、uber/AudoDisposeでは、次のように設定しています。
// build.gradle project.android {  libraryVariants.all {  it.generateBuildConfigProvider.configure {  it.enabled = false  }  } } モジュールで、BuildConfigが必要になることは稀なので、基本つけておくと良いと思います。
モジュール内でProGuard/R8の設定をする consumerProguardFilesを使うことで、モジュールのProguard/R8の設定を定義することが出来ます。
例えば、次のように使います。
// build.gradle android {  defaultConfig {  consumerProguardFiles &amp;#39;consumer-rules.</description>
    </item>
    
    <item>
      <title>Android マルチモジュール: ライブラリのバージョン管理について</title>
      <link>https://satoshun.github.io/2019/09/multi-module-dependency-management/</link>
      <pubDate>Mon, 23 Sep 2019 12:07:59 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/09/multi-module-dependency-management/</guid>
      <description>マルチモジュールなアプリを作ることをテーマにいくつかの記事を書いていきたいと思っています。
まだ正確には決まっていないのですが、以下のような内容をまとめていこうと思っております。
 ライブラリのバージョン管理について マルチモジュール構築に役立つGradleの設定 モノリシックなアプリからマルチモジュールへ 外部ライブラリとして切り出すタイミングを考える DFM、モジュール間の遷移方法 モジュールの階層について ビルドの高速化について   今回は、ライブラリのバージョン管理について書いてきます。
ライブラリのバージョン管理？ Android開発では、Gradleで外部ライブラリの依存を定義するのが一般的です。マルチモジュールプロジェクトの場合、外部ライブラリのバージョンを合わせるため、変数のような形で定義しておくと便利です。
変数の定義方法には、直接記述する方法を除くと、大きく2つの方法があります。
1. Gradleのextraプロパティを使う Androidの公式ドキュメント: Configure project-wide propertiesで紹介されている方法です。 extにバージョンを定義します。
例えば、OkHttpでは、次のように定義しています。
buildscript {  ext.versions = [  &amp;#39;animalSniffer&amp;#39;: &amp;#39;1.17&amp;#39;,  &amp;#39;assertj&amp;#39;: &amp;#39;3.11.0&amp;#39;,  &amp;#39;bouncycastle&amp;#39;: &amp;#39;1.62&amp;#39;,  &amp;#39;brotli&amp;#39;: &amp;#39;0.1.2&amp;#39;,  ...   ext.deps = [  &amp;#39;picocli&amp;#39;: &amp;#34;info.picocli:picocli:${versions.picocli}&amp;#34;,  &amp;#39;android&amp;#39;: &amp;#34;org.robolectric:android-all:9-robolectric-4913185-2&amp;#34;,  &amp;#39;animalSniffer&amp;#39;: &amp;#34;org.codehaus.mojo:animal-sniffer-annotations:${versions.animalSniffer}&amp;#34;,  &amp;#39;assertj&amp;#39;: &amp;#34;org.assertj:assertj-core:${versions.assertj}&amp;#34;,  &amp;#39;bouncycastle&amp;#39;: &amp;#34;org.bouncycastle:bcprov-jdk15on:${versions.bouncycastle}&amp;#34;,  &amp;#39;brotli&amp;#39;: &amp;#34;org.brotli:dec:${versions.brotli}&amp;#34;,  ... extプロパティにライブラリのバージョンをセットします。</description>
    </item>
    
    <item>
      <title>マルチモジュールの遷移について考える Part2</title>
      <link>https://satoshun.github.io/2019/02/multi-module_transition_part2/</link>
      <pubDate>Fri, 15 Feb 2019 00:14:56 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/02/multi-module_transition_part2/</guid>
      <description>マルチモジュール遷移方法Part2です。Part1はここになります😌
Part2では、Navigation Componentを使うパターンを考えてみます。今回はDynamic Feature(DFM)には触れません。いわゆる一般的なライブラリモジュールでの遷移になります。
また、今回の検証に用いたコードはsatoshun/MultiModuleNavigationComponentExampleにあります。
モジュール構成について 細かい実装に入る前に、全体的なモジュール構成を説明します。今回はappモジュールがトップにあり、2つのfeatureモジュールがあるとします。
 各featureモジュールでは遷移用インターフェースを持っており、それを用いて他のfeature画面へ遷移をします。遷移用インターフェースの実装はapp内のrouterモジュールで行います。
このモジュール構成のポイントは、各featureモジュール内で自身が使う遷移インターフェースを定義し、appがそのインターフェースの実装を行う点です。このようにすることで、feature間で直接の依存を持つことを防ぐことができます。これは循環依存を避けるためです。
では、実装に入っていきます。今回はDagger2を使って実装をします。
featureモジュール側の遷移用インターフェースの定義 前述の図の通り、各featureモジュール内で遷移用のインターフェースを定義します。ここでは、featureモジュール内で使用するインターフェースを定義します。
main画面からsub1画面に移動したいとします。次のようなインターフェース定義になります。
interface MainModuleRouter {  // sub1画面へ移動する  fun routeToSub1() } Mainモジュール用のインターフェースなので、MainModuleRouterという名前にし、sub1画面へ遷移するためのメソッドを定義しています。
そしてこのインターフェースを、MainFragmentで使います。
class MainFragment : Fragment() {  @Inject lateinit var moduleRouter: MainModuleRouter   ...   override fun onViewCreated(view: View, savedInstanceState: Bundle?) {  super.onViewCreated(view, savedInstanceState)   view.findViewById&amp;lt;View&amp;gt;(R.id.route).setOnClickListener {  moduleRouter.routeToSub1()  }  } } これでfeatureモジュールでの遷移用インターフェースの定義は完了です。
次にこのインターフェースの実装をします。
routerモジュール側の遷移用インターフェースの実装 今回は、遷移用インタフェースの実装をrouterモジュールで行います。まずは、Navigation Componentを用いて、Graphを作ります。
&amp;lt;navigation xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;  xmlns:app=&amp;#34;http://schemas.</description>
    </item>
    
    <item>
      <title>でかいappモジュールがあるときに、中間モジュールを入れることで差分ビルドを上手く効かせる</title>
      <link>https://satoshun.github.io/2019/02/multi-module-speedup/</link>
      <pubDate>Mon, 11 Feb 2019 01:40:29 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/02/multi-module-speedup/</guid>
      <description>マルチモジュール構成のメリットに差分ビルドの効率化というものがあります。しかし、モノシリックなappモジュールから、マルチモジュール構成に変更していく過程ではappモジュールがでかいままなので、差分ビルドによる恩恵が受けにくいという問題があります。（最終段階まで進めばappモジュールは十分に小さくなるので、差分ビルドの恩恵を受けられます）
例えば、以下のモジュール構成を考えます。
 頑張って2つのモジュールを切り出しました。ただし、これではどこのモジュールを変更してもかなりのビルド時間がかかります。なぜなら、Gradleでは依存関係にあるモジュールが変更されたときに、自分自身も（ある程度?）再ビルドされるためです。なので、上記のモジュール構成だと、どこのモジュールを修正しても、常に大きいappモジュールが再ビルドされてしまうため、ビルド時間がかかってしまいます。
そこで、間に中間モジュールを挟むテクニックを紹介します。このテクニックを使うと以下のようになります。
 途中に適当なモジュールを挟むことで、サブ1、サブ2が変更されたときにappモジュールの再ビルドを防ぐことができます。
ただし、いくつか条件があります。
1. 中間モジュールで公開可能なものに限る 例えばサブ1でSubActivityを公開していて、これを直接appから参照している場合は駄目です。 これをSubActivityとしてではなく、Activityとして参照できるなら大丈夫です。サブ1モジュールで定義されているクラスがappモジュールから見れないための制約です。
中間モジュールのコードイメージとしては以下のようになります。
fun createUserFragment(userName: String, age: Int): Fragment {  return UserFragment.createFragment(userName, age) }  fun createUserIntent(context: Context): Intent {  return Intent(context, UserActivity::class.java) } UserActivity、UserFragmentが公開されていないことが分かります。Androidのいわゆるfeatureモジュールでは、Activity、Fragmentを公開する場合が多いと思うので、その場合には有効に使うことができます。
2. implementationで依存を定義する apiを使うと、依存が推移するため再ビルドが行われてしまうためです。implementationで依存を記述する必要があります。
3. Dagger2使ってると多分無理 Dagger2では、解決する依存をAppComponentで知っている必要があります。上記の構成だと、appでAppComponentを持つことになるので、appからsub1、sub2が見えていないと最終的にDagger2で解決できません。なので、中間モジュールで、appからsubの依存が見えなくなるこのパターンは使えません。
詳しくはDagger/#970にあります。
まとめ  やりすぎ感はある  ただでさえ複雑な、モジュール構成がさらに煩雑になりそう。ただし、最終的には消えるので、差分ビルドの恩恵を受けるためのステップだとすれば許せるかも? Dagger2を使っていると推移的依存が必要になり、使えない、もしくは工夫が必要になる   サンプルはsatoshun/ApplicationModulesSpeedUpExampleにあります  サブモジュールを変更したときのビルドは爆速でした😊    Daggerの部分のいい解決方法を知っている人がいたら、教えて頂けると幸いです😊😊😊</description>
    </item>
    
    <item>
      <title>Dynamic Feature ModuleでDagger Androidを使う</title>
      <link>https://satoshun.github.io/2019/01/dynamic-feature-and-dagger-android/</link>
      <pubDate>Wed, 16 Jan 2019 12:10:36 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/01/dynamic-feature-and-dagger-android/</guid>
      <description>Dependency injection in a multi module projectを見て、Dynamic FeatureをDagger Androidで実現するにはどうするかを考えてみました。
結論からいうと、いくつかのbaseクラスを定義することで対応できそうです。
また、この記事ではDynamic Feature Module、Dagger Androidをある程度知っている前提で進めていきます。
検証に用いたコードはsatoshun-android-example/DynamicFeatureDaggerExampleにあります😊
前提知識 通常のDagger AndroidはApplicationクラスでComponentを保持して、そこからSubcomponentを派生させる形になります。 ここでのポイントは、Applficationでトップに位置するComponentを保持/作成するという点です。これはappモジュールが全てのFeatureモジュールを知っていることを意味します。
   この前提をもとに、Dynamic Featureを考えます。Dynamic FeatureではApplicationでトップに位置するComponentを保持/作成することが出来ません。なぜなら、appモジュールは各Featureモジュールのことを知れないためです。Dynamic Moduleでは通常のモジュール構成と違い、appとFeature Module間の依存関係が逆転します。結果、Applicationでトップに位置するComponentを保持/作成することが出来ません。
   そこでDynamic Featureでは、appモジュールでトップに位置するComponentを保持するのはやめて、各Feature Module内でそれぞれのComponentを保持するのが良いことが分かります。
ここまでが前提知識で、次にDynamic Feature + Dagger Androidの実装について説明します。
実装 Feature Subモジュールがあり、このSubモジュールのエントリポイント（トップに位置するクラス）としてSubActivityが定義されているとします。 実装の方針としては、このSubActivityをDaggerApplicationのように振る舞わさせることを目指します。なぜなら、このFeatureモジュールのトップに位置するクラスがSubActivityなので、これをDaggerApplicationのように扱うことができれば、Dagger Androidの世界に上手く落とし込むことが出来ると考えたからです。
では、実装を始めます。
最初に、SubActivityをDaggerApplicationのように振る舞わさせるためにModuleRootActivityクラスを定義します。 それに合わせて、いくつかの付随したクラスも定義しておきます。これがbaseクラス群になります。
abstract class ModuleRootActivity : AppCompatActivity(),  HasModuleInjector {  @Inject lateinit var fragmentInjector: DispatchingAndroidInjector&amp;lt;Fragment&amp;gt;   private lateinit var injector: ModuleActivityInjector   override fun onCreate(savedInstanceState: Bundle?</description>
    </item>
    
    <item>
      <title>マルチモジュールの遷移について考える Part1</title>
      <link>https://satoshun.github.io/2018/12/multi-module_transition_part1/</link>
      <pubDate>Mon, 31 Dec 2018 06:19:39 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2018/12/multi-module_transition_part1/</guid>
      <description>Androidのトレンドの1つにマルチモジュール構成があります。 マルチモジュールによるメリットとして、
 ビルド時間の短縮 依存関係を各モジュールに閉じ込めることでコードをクリーンに保つことが期待できる  などがあります。大規模なプロジェクトでは上記のメリットは大きいため、マルチモジュールに移行していくことになると思います。
この記事は、マルチモジュールにした際のActivity間の遷移について考えたいと思います。目指すゴールとしては、
 型安全にしたい、もしくはコンパイル時にチェックする機構が欲しい コード量を減らしたい  Part1では、遷移専用のモジュールを作る方法を考えてみます。
サンプルコード: satoshun-android-example/MultiActivityRouterExample
遷移専用のモジュールを作る まず依存関係の構築の原則に、Circular Dependency、循環依存を作り出してはいけないというものがあります。
例えば、メイン画面とサブ画面の2画面があり、それらの画面は相互に行き来するとします。それらをメイン画面モジュール、サブ画面モジュールとして切り出すと次のようになります。
 メインではサブ画面が必要なのでサブモジュールに依存する サブではメイン画面が必要なのでメインモジュールに依存する     これでは循環参照になり、依存関係が壊れてしまうので駄目です。そこでDIP、依存関係逆転の原則を用います。 直接Activityを参照しているのが問題なので、各画面に遷移できる遷移用のインターフェースを定義することで解決を目指します。
そこで、
 メイン画面に遷移するメインルーターモジュール サブ画面に遷移するサブルーターモジュール  の2つのモジュールを作ります。
メインルーターモジュールでは次の遷移専用インターフェースを定義します。
interface MainRouter {  fun routeToMain(context: Context): Intent } そして、メインモジュールで実装します。また、今回はDaggerを使って依存を解決します。
internal class MainRouterImpl @Inject constructor() : MainRouter {  override fun routeToMain(context: Context): Intent {  return Intent(context, MainActivity::class.java)  } }  ---  @Module internal interface MainActivityModule {  @Binds fun bindMainRouter(impl: MainRouterImpl): MainRouter } これで、使う側であるサブ画面は、メインモジュールに依存するのではなく、メインルーターモジュールに依存し遷移することが出来ます。</description>
    </item>
    
    <item>
      <title>GradleのMatching repositories to dependenciesを使ってライブラリのダウンロード先を指定する</title>
      <link>https://satoshun.github.io/2018/12/gradle_deps_match/</link>
      <pubDate>Thu, 13 Dec 2018 11:16:06 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2018/12/gradle_deps_match/</guid>
      <description>JitPackからライブラリをインストールしたかったところ、JCenterからライブラリをインストールしてしまう事件がありました。 詳しくは次のリンクを参照してください。A Confusing Dependency
従来のGradle4系ではおそらく、上記の問題を解決することは出来ない、もしくは非常に困難でした。しかし新しくGradle5.1に Matching repositories to dependencies が導入され、上記の問題を解決できます。（Gradle5.1はまだrcです）
まず最初に従来の書き方を説明して、次に新機能を使った書き方を紹介します。今回は例として、cloudflareのSDKを依存関係に入れることを目指します。 また、今回の検証にはGradle 5.1-rc-1を使いました。サンプルコードはここにあります
まずは従来の書き方です。
// topのbuild.gradle allprojects {  repositories {  ...   maven {  url &amp;#34;https://storage.googleapis.com/cloudflare-maven/public/&amp;#34;  }  } }  ---  // projectのbuild.gradle dependencies {  ...   implementation &amp;#34;com.cloudflare:cloudflare-mobile-sdk:2.1.0@aar&amp;#34; } これだと全てのライブラリに対して、repositoriesで指定したhttps://storage.googleapis.com/cloudflare-maven/public/へチェックをしにいきます。このUrlはcloudflareのライブラリにしか使われないことが想定されるので、他のライブラリに対してはダウンロード制限をかけたいところです。
次に新機能を使った書き方です。
// topのbuild.gradle allprojects {  repositories {  ...   maven {  url &amp;#34;https://storage.googleapis.com/cloudflare-maven/public/&amp;#34;  content {  // group idがcom.</description>
    </item>
    
    <item>
      <title>Gradle: Dagger2でapiとimplementationどちらを使うか議論されている</title>
      <link>https://satoshun.github.io/2018/12/gradle-api_vs_implementation/</link>
      <pubDate>Sat, 08 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2018/12/gradle-api_vs_implementation/</guid>
      <description>注意 この記事はapiとimplementationの説明をする類の記事ではありません。
GradleでcompileがDeprecatedになり、implementationまたはapiを使うことが推奨されています。 それに合わせて多くのライブラリのREADMEのcompileがimplementationまたはapiに置き換わりました。
Dagger2でもcompileをimplementationに置き換えるPRが出されました。https://github.com/google/dagger/pull/1130
内容が興味深かったのでまとめてみようと思います。
まず最初のPRは次の差分になっていました。compileをimplementationに置き換えています。
// Add Dagger dependencies dependencies { - compile &amp;#39;com.google.dagger:dagger:2.x&amp;#39; + implementation &amp;#39;com.google.dagger:dagger:2.x&amp;#39; annotationProcessor &amp;#39;com.google.dagger:dagger-compiler:2.x&amp;#39; } - compile &amp;#39;com.google.dagger:dagger-android:2.x&amp;#39; - compile &amp;#39;com.google.dagger:dagger-android-support:2.x&amp;#39; // if you use the support libraries + implementation &amp;#39;com.google.dagger:dagger-android:2.x&amp;#39; + implementation &amp;#39;com.google.dagger:dagger-android-support:2.x&amp;#39; // if you use the support libraries ここでjakeさんが
 I think this one is somewhat debatable, but you&amp;rsquo;re likely to mark it as implementation in every module that contains the compiler so it&amp;rsquo;s probably a non-problem.</description>
    </item>
    
  </channel>
</rss>
