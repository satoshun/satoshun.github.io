<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>io19 on stsnブログ</title>
    <link>https://satoshun.github.io/tags/io19/</link>
    <description>Recent content in io19 on stsnブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Sun, 09 Jun 2019 12:04:27 +0000</lastBuildDate><atom:link href="https://satoshun.github.io/tags/io19/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Google I/O&#39;19: Build a Modular Android App Architectureのまとめ・感想</title>
      <link>https://satoshun.github.io/2019/06/build-a-modular-android-app-architecture/</link>
      <pubDate>Sun, 09 Jun 2019 12:04:27 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/06/build-a-modular-android-app-architecture/</guid>
      <description>以下の動画のまとめです。
Build a Modular Android App Architecture (Google I/O&#39;19)
なぜモジュール化をするか? スケール モジュール化することで、開発者が独立して開発出来るようになる
人数が増えてきた時、アプリが大きくなってきた時にモジュール化は有効 保守性 例えば、モノリシックアプリだとレイアウトファイルを1つのディレクトリに持つことになる
何をしているのか、何をしたいのかが理解しにくい 長いレイアウトファイル名になりがち ビルド時間の短縮 変更があったモジュール + その依存関係にあるモジュールが再ビルドされるため、ビルド時間が短くなる
CIの高速化 再ビルドが必要なモジュールのみテストをすれば良いので、テスト時間が短くなる
androidx/dependencyTrackerを使うといい感じにテストが出来る（らしい） APKサイズの縮小 App Bundle、Dynamic Deliveryの恩恵を受けられる
モジュール どのようにモジュール分けをするか?
1. Feature（機能）ごとに分ける ライブラリモジュールとDynamic Featureモジュールの2種類がある。
ライブラリモジュール com.android.libraryを指定する Dynamic Featureモジュール onDemand trueとfalseがある Paidのような一部のユーザが使う機能の場合はtrueが良い Onboardingのように、後でいらなくなる機能の場合はfalseが良い Plaidでは以下のようなモジュール構成にした。
dribbleと、designernewsがDynamic Featureモジュールになっている。
2. Layer（層、階層）ごとに分ける Plaidでは以下のように分けた。
Web Servicesの知識はUIはいらないので、implementationを指定する そうすることで、UIがDTOやRetrofitの知識を知らないですむ Entitiesの知識はUIが必要なので、apiを指定する ただし、この場合、DAOsの知識までUIが知ってしまうので微妙 そこでCommon Value Objectsの導入 こうすることで、UIがDAOの知識を知らずに済む
Fakes for tests モックよりも優れた方法 fakeはRepository（対象のクラス）がどのように振る舞うかを理解した上で作られる （モックはその場、その場で作られがちという意味？） Featureモジュールの利点 カプセル化 Dynamic Delivery Layerごとに分ける利点 サードパーティライブラリの依存を独立 構造をもたらす Dynamic Deliveryの課題 Featureモジュール間のNavigationをどうするか?</description>
    </item>
    
    <item>
      <title>Data Binding 3.5と3.6のまとめ/感想</title>
      <link>https://satoshun.github.io/2019/05/databinding-3dot5/</link>
      <pubDate>Thu, 16 May 2019 00:33:48 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/05/databinding-3dot5/</guid>
      <description>Google I/O 2019でDataBindingについて少し話されていたので感想とまとめを。 動画だとここらへんになります。
改善系 ビルドの高速化! 20%くらいビルドが早くなった distributed build cache対応 Incremental annotation processing対応 android.databinding.incremental=true を設定にすると使えます Android Studioとの連携強化!! Live Class Generation XMLを変更したら、コンパイルせずともクラス、フィールドにアクセスすることが出来る リファクタリング系 フィールド名の変更リファクタリングなどをしたときに、XML、コードの両方に反映される Errorメッセージの改善!!! DataBinding用のエラーセクションが出来たことで、どこでエラーが出たか特定しやすくなった 新規系 View Binding 簡易版Data Bindingのような立ち位置で、findViewByIdを省略 + コンパイルセーフ + コンパイルを高速にすることを目的に作られました。3.6で入るみたいです。
Data Bindingと比較したときの、メリット、デメリット以下になります。（ただし、まだalphaも出ていない段階なのでI/O動画から見る限りの感想です）
メリット コンパイルが早くなる Data Bindingより機能が少なくなるのでそれはそう &amp;lt;layout&amp;gt;で囲う必要がなくなった これ個人的には好きでなかったので嬉しい。ネストが減る デメリット &amp;lt;data&amp;gt;セクションがなくなる モデルの値とViewのマッピングはコード側ですることになりそう 多分BindingAdapterは使えない これもコード側ですることになりそう 双方向バインディングとか使えない おそらくなんですけど、Data Binding、View Bindingは1つにプロジェクトに混在させることが出来るので、基本View Bindingで、双方向使いたいときはData Bindingみたいな使い方も出来るはずです。
まとめ/感想 今、3.5-beta01を使っているんですが、肌感、かなり良くなっています😃 Live Class Generation便利すぎワロリン View Bindingはとても良さそう Kotlin syntheticの代わりに使ってもよさそう </description>
    </item>
    
  </channel>
</rss>
