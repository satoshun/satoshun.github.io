<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>r8 on stsnブログ</title>
    <link>https://satoshun.github.io/tags/r8/</link>
    <description>Recent content in r8 on stsnブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Thu, 07 Feb 2019 13:19:13 +0000</lastBuildDate><atom:link href="https://satoshun.github.io/tags/r8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DroidKaigi2019で「R8/ProGuard 徹底比較」というテーマで発表しました</title>
      <link>https://satoshun.github.io/2019/02/droidkaigi-2019/</link>
      <pubDate>Thu, 07 Feb 2019 13:19:13 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/02/droidkaigi-2019/</guid>
      <description>DroidKaigi2019でセッションが採択されたので発表しました。
https://speakerdeck.com/satoshun/proguard-che-di-bi-jiao
最初に発表の反省点です。
多く詰め込みすぎて、1つ1つの掘り下げが疎かになった 結果的に広く浅い発表になってしまったため、1つの1つがあまり丁寧に説明できていなかったように感じています。重要な部分はもう少し丁寧に発表すべきでした。 早口すぎ、俺は生き急いでるのか？ 本当に申し訳ありませんでした。前日に最終確認したところ20分近くオーバーしてしまい、そこからある程度は間引いたんですが、早口でいくという戦略を取ってしまいました😂 他の方の発表のように聞きやすい発表を今後は意識していきます！ 次に良かった点です。
発表前の休憩時間に、司会の@neonankitiさんの助けで、アイスブレイク?のようなことができた @neonankitiさんとは初対面だったんですが、謎の掛け合いができ、会場の雰囲気も良くなったように思います😊 なんだかんだとR8のコードを触れたのは良かった R8コンパイラのコードに触れるかどうか悩んだのですが、printデバッグなどを駆使して、理解が間違っていないことが確認できたので、載せてみました。概要だけですが、個人的には良かったと思っています。 最後に話した実践編のウケが良くてよかった R8の凄さが分かりやすく伝えられたのかなと思います😊 最後に、僕の発表を聞きに来てくれた人、運営のみなさんありがとうございました😊
また来年もあれば登壇できるように頑張ります💪</description>
    </item>
    
    <item>
      <title>R8/Proguard: JarファイルからProGuard設定ファイルを読み込んでくれるようになりました</title>
      <link>https://satoshun.github.io/2019/01/r8-proguard-metainf/</link>
      <pubDate>Mon, 28 Jan 2019 00:08:35 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/01/r8-proguard-metainf/</guid>
      <description>AGP3.3.0ProGuardはAGP3.3.0、R8は導入されたAGP3.2.0から、JarファイルのProGuard設定ファイルを組み込めるようになりました。その機能紹介です。 今まで、aarではconsumerProguardFilesで、ライブラリのProGuard設定を指定できました。それのJar、Javaバージョンとなります。
ライブラリ開発者側の設定 RetrofitなどのSquare社のライブラリでは、早くもこの機能に対応しているので、それを例にして説明します。
まず、resources/META-INF/prougardディレクトリの中にProGuardの設定ファイルを置きます。
square/retrofit
ライブラリ側の設定はこれで完了です。
使う側の設定 AGP3.3.0にアップデートするだけで使えます。META-INF/ProGuardはRetrofitの2.5.0から入っているので、まずはMETA-INFが入っていない、2.4.0でビルドをしてみます。
implementation &amp;#34;com.squareup.retrofit2:retrofit:2.4.0&amp;#34; &amp;gt; ./gradlew installRelease ... Warning: there were 267 unresolved references to classes or interfaces. You may need to add missing library jars or update their versions. If your code works fine without the missing classes, you can suppress the warnings with &amp;#39;-dontwarn&amp;#39; options. (http://proguard.sourceforge.net/manual/troubleshooting.html#unresolvedclass) Warning: Exception while processing task java.io.IOException: Please correct the above warnings first. Thread(Tasks limiter_2): destruction 失敗しました😂</description>
    </item>
    
    <item>
      <title>R8/Proguard: Daggerの生成コードがR8でどのように変わるかを見る</title>
      <link>https://satoshun.github.io/2019/01/r8-dagger-optimize/</link>
      <pubDate>Sun, 20 Jan 2019 13:55:46 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/01/r8-dagger-optimize/</guid>
      <description>コードの最適化の話です。この記事では実践に寄せて、Daggerの生成コードがR8によってどのように変化するかを見ます。
まずはサンプルコードです。
@Component( modules = [ AppModule1::class, AppModule2::class ] ) interface AppComponent { @Component.Builder interface Builder { fun build(): AppComponent } fun inject(activity: MainActivity) } @Module class AppModule1 { @Provides fun provideService(): AppService { val retrofit = Retrofit.Builder() ... return retrofit.create() } } @Module object AppModule2 { @JvmStatic @Provides fun provideService2(): AppService2 { val retrofit = Retrofit.Builder() ... return retrofit.create() } } --- class MainActivity : AppCompatActivity() { @Inject lateinit var appService: AppService @Inject lateinit var appService2: AppService2 override fun onCreate(savedInstanceState: Bundle?</description>
    </item>
    
    <item>
      <title>R8/Proguard: Kotlinのlambda最適化について</title>
      <link>https://satoshun.github.io/2019/01/r8-kotlin-lambda/</link>
      <pubDate>Sun, 20 Jan 2019 06:56:16 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/01/r8-kotlin-lambda/</guid>
      <description>コードの最適化の話です。この記事ではKotlinのlambda式の最適化について紹介します。
Kotlin lambda Kotlinでは関数型がファーストクラスです。とても便利なのですが、ラムダを使うたびに内部的にはクラスを1つ定義するため、クラス数、メソッド数がどんどん増えていきます。
例えば、次のコードを最適化なしでコンパイルしてみます。
fun main() { lambdaTest1 { println(&amp;#34;Kotlin lambda1&amp;#34;) } lambdaTest1 { println(&amp;#34;Kotlin lambda2&amp;#34;) } lambdaTest1 { println(&amp;#34;Kotlin lambda3&amp;#34;) } ... } private fun lambdaTest1(body: () -&amp;gt; Unit) { ... body() ... } // コンパイル後 public static final void main() { LambdaTestKt.lambdaTest1((Function0) LambdaTestKt$main$1.INSTANCE); LambdaTestKt.lambdaTest1((Function0) LambdaTestKt$main$2.INSTANCE); LambdaTestKt.lambdaTest1((Function0) LambdaTestKt$main$3.INSTANCE); ... } final class LambdaTestKt$main$1 extends Lambda implements Function0&amp;lt;Unit&amp;gt; { public static final LambdaTestKt$main$1 INSTANCE = new LambdaTestKt$main$1(); LambdaTestKt$main$1() { super(0); } public final void invoke() { System.</description>
    </item>
    
    <item>
      <title>R8/Proguard: KotlinのCompanion objectとobjectについて</title>
      <link>https://satoshun.github.io/2019/01/r8-companion-object/</link>
      <pubDate>Sun, 20 Jan 2019 04:23:43 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/01/r8-companion-object/</guid>
      <description>コードの最適化の話です。この記事ではKotlinのCompanion objectとobjectについて紹介します。
この記事は、R8 Optimization: Staticizationにとても影響を受けています。
Companion object 例えば、次のコードがあるとします。
class CompanionTest { companion object { fun show(i: Int) { ... } } } これを最適化なしで変換すると次のようになります。
public final class CompanionTest { public static final Companion Companion = new Companion(); public static final class Companion { private Companion() { } public final void show(int i) { ... } } } Companionインスタンスが生成されているのが分かります。ただ、このCompanion objectはインスタンス生成する必要がありません。なぜなら、インターフェースの実装などをしていないからです。
そこでR8による最適化を行うと次のようになります。
public abstract class CompanionTest { public static final void show(int i) { .</description>
    </item>
    
    <item>
      <title>R8/Proguard: Class Mergingについて</title>
      <link>https://satoshun.github.io/2019/01/r8-merge-method/</link>
      <pubDate>Sun, 20 Jan 2019 02:16:43 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/01/r8-merge-method/</guid>
      <description>コードの最適化の話です。この記事ではClass Mergingについて紹介します。
Class Merging? その名の通り、Classをマージする最適化です。最終的なクラス数減らすことが期待出来ます。 Class Mergingには縦方向（Vertical）と、横方向（Horizontal）があります。
まずは縦方向のClass Mergingについて説明します。
縦方向? 縦方向とはスーパータイプの実装が1つだったときに、そのスーパータイプと実装であるサブタイプを1つにまとめる最適化です。
例えば、次の実装は最適化によって1つにまとめられます。
interface IVertical { fun show(i: Int) } class Vertical( private val a: Int ) : IVertical { override fun show(i: Int) { println(&amp;#34;start called $i $a&amp;#34;) } } &amp;ndash;&amp;gt; Proguard/R8による最適化後 &amp;ndash;&amp;gt;
public final class Vertical { ... public final void show(int i) { ... } } IVerticalインターフェースが見事に消されていることが分かります。
また、インターフェースではなくabstractクラスの場合はR8の場合のみ上手くマージされました。
R8: Vertical Merger Proguard: Vertical Merger 次に横方向のマージを紹介します。
横方向? Staticメソッドのみを持つクラスを1つにまとめるなどの最適化を行います。
例えばKotlinの複数のファイルで定義されたトップレベル関数を1つのクラスにまとめてくれます。</description>
    </item>
    
  </channel>
</rss>
