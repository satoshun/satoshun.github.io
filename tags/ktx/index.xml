<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ktx on stsnブログ</title>
    <link>https://satoshun.github.io/tags/ktx/</link>
    <description>Recent content in ktx on stsnブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Thu, 04 Apr 2019 00:46:00 +0000</lastBuildDate><atom:link href="https://satoshun.github.io/tags/ktx/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DataBindingとActivityのコンストラクタ Layout Id指定を一緒に使う</title>
      <link>https://satoshun.github.io/2019/04/jetpack-coroutine-support/</link>
      <pubDate>Thu, 04 Apr 2019 00:46:00 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/04/jetpack-coroutine-support/</guid>
      <description>JetpackのActivityとFragmentのコンストラクタに、Layout Idが指定できるようになりました。
 Activity Version 1.0.0-alpha06 Fragment Version 1.1.0-alpha06  これは、次のように使うことが出来ます。
class MainActivity : AppCompatActivity(R.layout.main_act)  class MainFragment : Fragment(R.layout.main_frag) Activityの場合は、setConentViewが。Fragmentの場合はonCreateViewがそれぞれ省略することが出来ます。
ここからが本題です。これをDataBindingと一緒に使うなら、次のようになるかなと思います。
Activityの場合 まずはActvityの例です。
// 拡張関数を定義しておく fun &amp;lt;T : ViewDataBinding&amp;gt; ComponentActivity.bindView(): T =  DataBindingUtil.bind(getContentView())!!  private fun Activity.getContentView(): View =  findViewById&amp;lt;ViewGroup&amp;gt;(android.R.id.content)[0]   // MainActivity.kt class MainActivity : AppCompatActivity(R.layout.main_act) {  private lateinit var binding: MainActBinding   override fun onCreate(savedInstanceState: Bundle?) {  super.onCreate(savedInstanceState)  binding = bindView()  .</description>
    </item>
    
    <item>
      <title>Android: JetpackのCoroutine Supportについて</title>
      <link>https://satoshun.github.io/2019/03/jetpack-coroutine-support/</link>
      <pubDate>Sun, 10 Mar 2019 10:14:21 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/03/jetpack-coroutine-support/</guid>
      <description>Jetpackのいくつかのライブラリでは、Kotlin Coroutineのサポートが入っていますが、 どのライブラリで対応が進んでいるか気になったので、軽くまとめます。使い方については言及しません。
以下、2019年3月10日 2019年3月11日の調査結果になります。 また、これらは、supportライブラリのリポジトリから取ってきたので、現在リリースされているかどうかは不明です。
Lifecycle
// Lifecycleに従うCoroutineScopeの生成 val Lifecycle.coroutineScope: CoroutineScope LifecycleOwner
// LifecycleOwnerに従うCoroutineScopeの生成 val LifecycleOwner.lifecycleScope: CoroutineScope ViewModel
// ViewModelに従うCoroutineScopeの生成 val ViewModel.viewModelScope: CoroutineScope WorkManager
abstract class CoroutineWorker(  appContext: Context,  params: WorkerParameters ) : ListenableWorker(appContext, params) {  // suspendメソッドで定義された  abstract suspend fun doWork(): Result } Room
// Dao内でsuspendメソッドが使える @Dao interface HogesDao {  @Insert  suspend fun add(hoge: Hoge)   @Query(&amp;#34;SELECT * FROM hoge WHERE id = :id&amp;#34;)  suspend fun get(id: String): Hoge   .</description>
    </item>
    
  </channel>
</rss>
