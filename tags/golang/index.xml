<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on stsnブログ</title>
    <link>https://satoshun.github.io/tags/golang/</link>
    <description>Recent content in golang on stsnブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Mon, 01 Aug 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://satoshun.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang: structで宣言したメソッドを明示的に呼び出す</title>
      <link>https://satoshun.github.io/2016/08/go-struct-method/</link>
      <pubDate>Mon, 01 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2016/08/go-struct-method/</guid>
      <description>Goでは, 宣言したtypeにメソッドを定義することが出来ます.
典型的な用途としては, structでデータ型を宣言して, それにメソッドを定義する使い方だと思います.
type Hoge struct { } func (h Hoge) h1() { fmt.Println(&amp;#34;called h1&amp;#34;) } func (h *Hoge) h2() { fmt.Println(&amp;#34;called h2&amp;#34;) } 通常メソッドを呼ぶ際は, インスタンスを作成し, そのインスタンスを通じてメソッドをコールします.
h := Hoge{} h.h1() // output: called h1 h.h2() // output: called h2 このさい, h1, h2メソッドを通じて, 暗黙的にインスタンスも渡されています.
暗黙的に渡している部分を, 明示的に渡すと下のようになります.
h := Hoge{} Hoge.h1(h) // output: called h1 == h.h1() (*Hoge).h2(&amp;amp;h) // output: called h2 == h.h2() (*Hoge).h1(&amp;amp;h) // output: called h1 == h.</description>
    </item>
    
    <item>
      <title>Golang: nil pointer receiverの話</title>
      <link>https://satoshun.github.io/2015/02/go-nil_receiver/</link>
      <pubDate>Sun, 22 Feb 2015 02:08:23 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2015/02/go-nil_receiver/</guid>
      <description>nil pointer receiverについてお話しようと思います. 具体例をあげたほうが分かりやすいので, コードを元に説明していきます.
gist: https://gist.github.com/satoshun/3dc1302dbc163c9a9245
にソースコードがあります.
nil pointer receiver nilについて. 下のコードを見てください.
package main import &amp;#34;fmt&amp;#34; type A struct { } func (a *A) b() { fmt.Println(1000) } func main() { var a *A = nil a.b() } どう考えても, runtime error: nil pointer access 的なものが出るだろうと思っていました.
sato$ go run main.go 1000 ちゃんと実行できました. Goではnilにも型情報があるので, nilの場合でもPointer receiverの場合は実行できるのです! この機能を使えば, Pointer receiverの中でnilの場合に処理を変えることが可能です. 覚えておくと便利だと思います.
ちなみに, Value receiverの場合はエラーが出ます.
package main import &amp;#34;fmt&amp;#34; type A struct { } // b is value receiver func (a A) b() { fmt.</description>
    </item>
    
    <item>
      <title>AnsibleでGoアプリをデプロイ</title>
      <link>https://satoshun.github.io/2015/02/ansible-go_deploy/</link>
      <pubDate>Sun, 22 Feb 2015 01:08:23 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2015/02/ansible-go_deploy/</guid>
      <description>ローカルでバイナリを作成し, デプロイするような, Ansible Playbookを書きました. Supervisorでプロセスの管理を行っています.
下の手順でデプロイを行っています.
Macでコンパイルして, Linux-amd64用のバイナリ生成(注意1) バイナリをサーバにデプロイ(コピー) アプリのリスタート(supervisorで再起動) 実際のPlaybookは以下のようになります.
deploy.yml
--- - hosts: local connection: local tasks: - include: build.yml - hosts: app user: &amp;#34;{{ user }}&amp;#34; tasks: - include: update_binary.yml - include: restart.yml 各タスクについて, 説明してきます.
Linux-amd64用のバイナリ生成 Goはデフォルトで, クロスコンパイル出来る機能を持っているので, その機能を使います.
やり方はいろいろあると思うのですが, Makefileを作成して, それをAnsibleから叩くようにして実装しました. Makefileを作る必要ないと思います.
Makefile
get: go get -v build-amd64: get GOOS=linux GOARCH=amd64 go build . build.yml
--- - name: build src command: make build-amd64 chdir={{ local_home }} local_homeは変数で, Makefileがあるディレクトリを定義しています.</description>
    </item>
    
    <item>
      <title>様々な言語のフィボナッチ関数</title>
      <link>https://satoshun.github.io/2015/02/algorithm-multi_fibonacci/</link>
      <pubDate>Sun, 22 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2015/02/algorithm-multi_fibonacci/</guid>
      <description>Java, JavaScript, Go, Python, Bashでfibonacciを書いてみました.
極力, その言語特有の機能を使って実装するようにしました.
Go type fibonacci intで, int型にfibonacci用の関数を生やしました. せっかくなので, goroutineも使ってみました.
package main import &amp;#34;fmt&amp;#34; type fibonacci int func (self fibonacci) value() chan int { ch := make(chan int, 1) a, b := 0, 1 index := 0 go func() { defer close(ch) for { if int(self) &amp;lt; index { break } a, b = b, a+b index++ ch &amp;lt;- a } }() return ch } func main() { var i fibonacci i = 10 for v := range i.</description>
    </item>
    
  </channel>
</rss>
