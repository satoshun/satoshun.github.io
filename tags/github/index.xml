<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>github on stsnブログ</title>
    <link>https://satoshun.github.io/tags/github/</link>
    <description>Recent content in github on stsnブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Sat, 02 Mar 2019 13:21:05 +0000</lastBuildDate><atom:link href="https://satoshun.github.io/tags/github/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RxAndroidにPull Requestを出した話</title>
      <link>https://satoshun.github.io/2019/03/rx-android-pull-request/</link>
      <pubDate>Sat, 02 Mar 2019 13:21:05 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/03/rx-android-pull-request/</guid>
      <description>RxAndroidにIssueを立てて、PRを出した話です。広く使われているOSSプロジェクトに対して、Issueを立てて、テストもセットでPRを出したことがなかったので、それの記念記事になります。
Issueの内容 実際のIssueは HandlerScheduler.scheduleDirect supports async option? になります。
Issueの概要は、RxAndroidは2.1.0でasync messageに対応しました。しかし、これはWorker.scheduleのスケジュールからのみのサポートでした。RxJavaではScheduler.scheduleDirectでもスケジュールされるので、こちらも対応したほうが良いのでは？と思いIssueを立てました。
そもそもこの問題に気づいたきっかけ RxAndroidが2.1.0でasync messageに対応した時に、サンプルで効果を測定したところ、いくつかのオペレータではパフォーマンスの向上が見られないことに気づきました。このときは、サンプルが悪いのか、それとも環境がおかしいのか、またまたこれが意図した挙動なのかが分かりませんでした。とりあえず、自分のタスク管理をしているtodoistに「良く分からないけどパフォーマンスが向上しないパターンがある」みたいなタスクを作って、あとで調べることにしました。
調べ方 クラッシュするわけでもないので、パフォーマンスが向上するパターンと、向上しないパターンでスケジュールのされかたに違いがないかをデバッガーを使い、地道にコードを追いかけました。
結果、Observable.observeOnではWorker.scheduleメソッドでタスクのスケジューリングをし、Maybe.observeOnではScheduler.scheduleDirectメソッドでスケジューリングする違いがあることが分かりました。後は、それぞれのパスでのasync messageの挙動の違いを特定し、修正するだけです。
その他・感想 JakeさんとZacさんにレビューをしてもらった 二人のコードは良く読んでいて、尊敬しているAndroidエンジニアなので、その2人にレビューをしてもらえたのは嬉しかったです😃</description>
    </item>
    
    <item>
      <title>Go: GojiにPRした話</title>
      <link>https://satoshun.github.io/2015/02/go-pr_goji/</link>
      <pubDate>Sun, 22 Feb 2015 04:11:23 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2015/02/go-pr_goji/</guid>
      <description>Goにハマりつつあります. 最近家ではGo or Androidって感じです.
最近, GoのWEBフレームのソースコードをちょいちょい読んでいて, GojiにPRをしたのでその話.
Goji? Goji is a minimalistic web framework that values composability and simplicity です. SinatraのようなMicro Frameworkになっています.
どこにPRしたか? バグではなくて, こっちのほうがGoライクにだよ!と思ったのでPRをしました. 計2回PRしたので, それぞれ紹介します.
switch type assertion 1つ目は, switch type assertionについてです. switch文の冒頭にある, type assertionの結果を使うようにしました.
--- a/web/pattern.go +++ b/web/pattern.go @@ -32,13 +32,13 @@ type Pattern interface { } func parsePattern(p interface{}) Pattern { - switch p.(type) { + switch v := p.(type) { case Pattern: - return p.(Pattern) + return v case *regexp.</description>
    </item>
    
    <item>
      <title>Go: Goji patternマッチ部分のコードリーディング</title>
      <link>https://satoshun.github.io/2014/11/go-goji-code-reading/</link>
      <pubDate>Sun, 09 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2014/11/go-goji-code-reading/</guid>
      <description>Gojiでは, sinatraライクにURLマッチングをさせることが出来ます. この記事では, URLマッチングさせる部分のソースコードを解説していきます.
まず, parsePatternメソッドから.
func parsePattern(p interface{}) Pattern {  switch p.(type) {  case Pattern:  return p.(Pattern)  case *regexp.Regexp:  return parseRegexpPattern(p.(*regexp.Regexp))  case string:  return parseStringPattern(p.(string))  default:  log.Fatalf(&amp;#34;Unknown pattern type %v. Expected a web.Pattern, &amp;#34;+  &amp;#34;regexp.Regexp, or a string.&amp;#34;, p)  }  panic(&amp;#34;log.Fatalf does not return&amp;#34;) } switch p.(type)で, 与えられたパターンの型によって処理を分岐させています. Pattern, *regexp.Regexp, stringの3パターンに対応しています.
今回は, stringの場合, parseStringPatternの処理を見ていきます.
parseStringPattern 中身 const bc = &amp;#34;/.</description>
    </item>
    
  </channel>
</rss>
