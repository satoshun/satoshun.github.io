<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>frontend on stsnブログ</title>
    <link>https://satoshun.github.io/tags/frontend/</link>
    <description>Recent content in frontend on stsnブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Sat, 14 Mar 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://satoshun.github.io/tags/frontend/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HTML5: Shadow DOMについて</title>
      <link>https://satoshun.github.io/2015/03/shadow_dom/</link>
      <pubDate>Sat, 14 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2015/03/shadow_dom/</guid>
      <description>Web Componentsの機能の一つ Shadow DOMについて説明します.
Shadow DOMとは? 外部から影響を受けない, 外部に影響を与えない隔離された要素です. 「カプセル化されたHTML要素」みたいな感じです.
Shadow DOMの誕生背景 なぜShadow DOMが出てきたかについて説明します.
CSS, JavaScriptは, 全要素に対して影響が及ぶという性質があります.(グローバルに影響を与える) ある箇所を修正したら, 予期せぬ箇所にも影響が出てしまうことがよく起こりますが, これはバグを生み出しやすくとてもよくないです. 例をあげると,
.hoge {  font-size: 30px; } と書くと, hogeをclass属性に持つ要素の文字サイズが30pxになります. 偶然にも他の部分でhogeクラスセレクターを使っていたとしたらそのセレクターにも影響を与えてしまいます. 仮に, 他の人が作ったコンテンツが隔離されて使用できれば, 同じセレクターを使ったとしても, 問題がなくなります.
フロント側が年々複雑になったことにより, スタイルシート, JavaScriptが肥大化した結果, コンテンツを互いに隔離したいという要望が高まり, Shadow DOMが誕生しました.
使い方 Shadow DOMを作るにはcreateShadowRootAPIを使います. 以下, Shadow DOM版Hello Worldです.
 &amp;lt;div id=&amp;#34;shadow&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;   &amp;lt;script&amp;gt;  function insertShadow() {  // Shadow DOMの作成  var shadow = document.querySelector(&amp;#39;#shadow&amp;#39;).createShadowRoot();  shadow.textContent = &amp;#39;Hello world&amp;#39;;  }  insertShadow();  &amp;lt;/script&amp;gt; Shadow DOMが挿入され, Hello Worldと表示されます.</description>
    </item>
    
  </channel>
</rss>
