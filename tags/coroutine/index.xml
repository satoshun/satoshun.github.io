<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>coroutine on stsnブログ</title>
    <link>https://satoshun.github.io/tags/coroutine/</link>
    <description>Recent content in coroutine on stsnブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Sat, 30 Jan 2021 07:20:42 +0000</lastBuildDate><atom:link href="https://satoshun.github.io/tags/coroutine/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kotlin: RxJava -&gt; Coroutineへの置き換えに使えるMigration.ktの紹介</title>
      <link>https://satoshun.github.io/2021/01/coroutine-migration-from-rxjava/</link>
      <pubDate>Sat, 30 Jan 2021 07:20:42 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2021/01/coroutine-migration-from-rxjava/</guid>
      <description>Kotlin Coroutineには Migration.kt が用意されており、RxJavaからCoroutineへの置き換えを手伝ってくれます。この記事では、どのように使うかを説明します。
例として、次のRxJavaを使ったクラスがあるとします。
import io.reactivex.Observable class TestRepository { fun getUser(): Observable&amp;lt;User&amp;gt; { ... } } これは、次のように使うことが出来ます。
val disposble = repository.getUser() .subscribeOn(Schedulers.io()) .subscribe( { println(it) }, { println(it) } ) ... このコードを、Coroutineに置き換えていきます。
まず、TestRepositoryクラスのRxJava部分をCoroutineのFlowにします。
import kotlinx.coroutines.flow.Flow private class TestRepository { fun getUser(): Flow&amp;lt;User&amp;gt; { ... } } そうすると、使っている側のコードでコンパイルエラーになります。なぜなら、Flow自体には、subscribeOnなどの関数が直接実装されていないためです。
しかし、Flowには拡張関数として、subscribeOnなどの関数が定義されています。なので、IDEの自動補完を使いimportすることで、一部、コンパイルエラーを解消することが出来ます。
import kotlinx.coroutines.flow.Flow import kotlinx.coroutines.flow.subscribe import kotlinx.coroutines.flow.subscribeOn val disposble = repository.getUser() .subscribeOn(Schedulers.io()) .subscribe( { println(it) }, { println(it) } ) これで、置き換え完了かというと、そうではありません。実はsubscribeOnなどの関数は定義されてはいるものの、実際には使うことは出来ません。
では、何が嬉しいかというと、subscribeOn関数は、次のようなエラーメッセージを出力します。</description>
    </item>
    
    <item>
      <title>Kotlin: FlowのflowOnオペレータの挙動</title>
      <link>https://satoshun.github.io/2020/01/coroutine-flowon/</link>
      <pubDate>Mon, 13 Jan 2020 11:47:10 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2020/01/coroutine-flowon/</guid>
      <description>CoroutineのFlowにはflowOnオペレータが定義されており、実行コンテキストを変更することが出来ます。
この記事はRxJava2のsubscribeOnとの挙動の違いを見ていきたいと思います。
動かしてみる まずは、Flowから。
withContext(Dispatchers.Main) { flowOf(1) .map { // Dispatchers.Defaultで動く println(&amp;#34;${Thread.currentThread()}&amp;#34;) it } .flowOn(Dispatchers.Default) .map { // Dispatchers.Mainで動く println(&amp;#34;${Thread.currentThread()}&amp;#34;) it } .collect { // Dispatchers.Mainで動く println(&amp;#34;${Thread.currentThread()}&amp;#34;) } } flowOnの上部（upstream)では、Dispatchers.Defaultで動き、下部（downstream)では、flowOnの影響を受けていないことが分かります。flowOnはdownstreamに影響しないため、このような動作になります。
次にRxJavaです。
Single .just(1) .map { // Schedulers.io上で動く println(&amp;#34;${Thread.currentThread()}&amp;#34;) it } .subscribeOn(Schedulers.io()) .map { // Schedulers.io上で動く println(&amp;#34;${Thread.currentThread()}&amp;#34;) it } .subscribe({ // Schedulers.io上で動く println(&amp;#34;${Thread.currentThread()}&amp;#34;) }) {} RxJavaではsubscribeOnは、特に途中でスケジューラーの変更が無い限り同一のスレッドで動作します。 なので、subscribeOn(Schedulers.io())を設定すると、下部（downstream)でもSchedulers.io上で実行されます。
FlowのflowOnを、RxJavaのsubscribeOnと同じ感覚で実装すると、間違ってしまうので注意が必要です。
ただ、Flowのmapなどのオペレーターはsuspend関数を取るので、基本的にはスレッドを意識しなくても良いはずです。
まとめ flowOnとRxJavaのsubscribeOn、動作がそれぞれ異なるので注意が必要 </description>
    </item>
    
    <item>
      <title>ViewModelとKotlin Coroutinesの書き方あれこれ</title>
      <link>https://satoshun.github.io/2019/12/android-viewodel-kotlin-coroutine/</link>
      <pubDate>Sun, 15 Dec 2019 07:15:43 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/12/android-viewodel-kotlin-coroutine/</guid>
      <description>ViewModel + Kotlin Coroutineを使う場合、どんな感じでViewModelでCoroutineを表現するかについてあれこれ書いてみました。
MVVM + Repositoryを想定しており、UIに反映する部分はLiveDataを考えています。
環境はandroidx.lifecycle:lifecycle-viewmodel-ktxは2.2.0-rc03、Coroutineは1.3.3です。
この記事は次の順序で進んでいきます。
viewModelScopeとは? suspend関数をコールするとき Flowをコール/購読するとき viewModelScopeとは? androidx.lifecycle:lifecycle-viewmodel-ktxライブラリには、viewModelScope拡張関数が含まれています。定義は次の通りです。
/** * [CoroutineScope] tied to this [ViewModel]. * This scope will be canceled when ViewModel will be cleared, i.e [ViewModel.onCleared] is called */ val ViewModel.viewModelScope: CoroutineScope ViewModelのライフサイクルに合わせたCoroutineScopeを取得することが出来ます。 このスコープ上でCoroutineを実行すれば、ViewModelの破棄に合わせて、自動でdisposeしてくれます。
また、viewModelScopeは、メインスレッド上で実行してくれるため、LiveData.setValueを使い、値を更新します。
val userLiveData = MutableLiveData(...) viewModelScope.launch { val user = userRepository.getUser() // 適当なsuspend関数をコール userLiveData.setValue(user) // メインスレッド上で実行されることが保証されているのでsetValueを使う // userLiveData.postValues(user) } viewModelScopeを使っている場合は、postValueメソッドを使うケースは無いと思います。
suspend関数をコールするとき ネットワークコールなどのAPIは、suspendで表現することになると思います。 また、Retrofitでは2.6.0から、suspendでAPIを定義出来るようになりました。またRoomでもsuspend関数を使うことが可能です。
なので、Repository層での定義は次のようになります。
interface UserApi { suspend fun getUser(): User } class UserRepository(private val retrofitService: UserApi) { suspend fun getUser() : User { val user = retrofitService.</description>
    </item>
    
    <item>
      <title>Kotlin: FlowのBufferの指定について</title>
      <link>https://satoshun.github.io/2019/08/flow-buffer/</link>
      <pubDate>Sat, 03 Aug 2019 23:37:02 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/08/flow-buffer/</guid>
      <description>CoroutineのFlowにはBufferを指定することができます。Bufferの指定によってどのように動作が変わるかを試してみました。
この記事は、少しFlowを触ったことあるぞ！って言う人向けになります。また、検証はCoroutine 1.3.0-RCで行っております。
Bufferの種類 Bufferの種類は5つあります。
UNLIMITED RENDEZVOUS CONFLATED BUFFERED 50、100などの、具体的な値 実質、BUFFEREDと同じ挙動をする 検証コード // flowストリームの作成 val f = flow { repeat(100) { delay(1) emit(&amp;#34;$it&amp;#34;) } } // observeする lifecycleScope.launch { f .buffer(...) ここでBufferを指定する .collect { delay(100) Log.d(&amp;#34;t4&amp;#34;, &amp;#34;$it&amp;#34;) } } このコードは、まず最初に、flowメソッドを使って、Flowストリームを作ります。これをこの記事ではProducer（生産者）と呼びます。このProducerは1つの値を送るのに約delay(1)かかります。なので、処理に約1msかかります。
次に、作ったflowをobserveします。observeする側をConsumer（消費者）と呼びます。Consumerではdelay(100)しているので、処理に約100msかかります。
これは、次の関係を作り出しています
Consumerの処理時間 &amp;gt; Producerの処理時間 この状態で、Bufferを指定したらどのように挙動が変わるかを見ていきます。
UNLIMITED f .buffer(Channel.UNLIMITED) .collect { delay(100) Log.d(&amp;#34;t4&amp;#34;, &amp;#34;$it&amp;#34;) } UNLIMITEDはBufferのサイズを無制限にします。
Consumer側で処理が終わってなくても値を送ります。その値は、Consumerが現在のタスクをしていたら、flowの内部で一旦保存されます。そして、Consumerの現在のタスクが完了したら、内部で保存したデータが1つずつ流れてきます。
Producer: Consumerの状態に関わらず、値を流してくる。Consumerの処理が終わっていないときは、内部キャッシュに保存されていく Consumer: すべての値を順番通りに受け取ることが出来る RENDEZVOUS f .buffer(Channel.RENDEZVOUS) .collect { delay(100) Log.d(&amp;#34;t4&amp;#34;, &amp;#34;$it&amp;#34;) } RENDEZVOUSは協調的に動かすためのBufferです。</description>
    </item>
    
    <item>
      <title>Retrofit: Coroutineを使うときの、Response&lt;T&gt;と生のTの使い分け</title>
      <link>https://satoshun.github.io/2019/07/retrofit-coroutine-return-type/</link>
      <pubDate>Tue, 02 Jul 2019 13:46:54 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/07/retrofit-coroutine-return-type/</guid>
      <description>psideさんの、Retrofit2でRxJavaを使う時の Result, Response, そのままT の使い分け所感のCoroutineバージョンの記事となります。
上記の記事に書いてある、Rxとは違い、Result型は用意されていないので、Response型で包むか、生で値ｗ受け取るかのどちらかが基本となります。
interface HogeService { suspend fun getHoge(): Hoge or suspend fun getHoge(): Response&amp;lt;Hoge&amp;gt; } Retrofitの2.6.0で、挙動の違いを確認しました。
生 Response 200 成功 成功 404 例外 成功 ネットワークに繋がっていない 例外 例外 シリアライズが出来ない（型がおかしい） 例外 例外 生の場合、HTTPのstatus Code的に失敗とされるものは例外になる Response型で包めば、HTTPのstatus Code的に失敗だとしても例外が発生しない っていう感じの挙動になります。
どっちを使えばいいの? サーバがエラーコードを返してきた時に、特別な振る舞いをしたいエンドポイントってあると思うので、そういうときはResponseで包んであげて、それ以外は生でいいんじゃない？って思ってます（小並感</description>
    </item>
    
    <item>
      <title>Kotlin: CoroutineでRxJavaのzipっぽいものを表現する</title>
      <link>https://satoshun.github.io/2019/03/coroutine-catalog-zip/</link>
      <pubDate>Sun, 17 Mar 2019 05:17:23 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/03/coroutine-catalog-zip/</guid>
      <description>Coroutineで非同期処理を並列に処理したいとします。例外を考慮しないなら単純にasyncで包めば良いです。
launch { val task1 = async { MainService.task1() } val task2 = async { MainService.task2() } println(&amp;#34;${task1.await()}\n${task2.await()}&amp;#34;) } asyncで包むことで、並列に処理をすることができます。
次に、各非同期処理が例外を吐く場合を考えてみます。その場合は、呼び出し元でrunCatchingを使います。
launch { val task1 = async { runCatching { MainService.task1() } } val task2 = async { runCatching { MainService.task2() } } val result1 = task1.await() val result2 = task2.await() println(&amp;#34;$result1\n&amp;#34; + &amp;#34;$result2\n&amp;#34;) } runCatchingを使うことで、呼び出し先で例外が起こったとしても、処理を継続することが出来ます。
また、次のように書くことは出来ません。
launch { val task1 = async { MainService.task1() } val task2 = async { MainService.</description>
    </item>
    
    <item>
      <title>Android: JetpackのCoroutine Supportについて</title>
      <link>https://satoshun.github.io/2019/03/jetpack-coroutine-support/</link>
      <pubDate>Sun, 10 Mar 2019 10:14:21 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/03/jetpack-coroutine-support/</guid>
      <description>Jetpackのいくつかのライブラリでは、Kotlin Coroutineのサポートが入っていますが、 どのライブラリで対応が進んでいるか気になったので、軽くまとめます。使い方については言及しません。
以下、2019年3月10日 2019年3月11日の調査結果になります。 また、これらは、supportライブラリのリポジトリから取ってきたので、現在リリースされているかどうかは不明です。
Lifecycle
// Lifecycleに従うCoroutineScopeの生成 val Lifecycle.coroutineScope: CoroutineScope LifecycleOwner
// LifecycleOwnerに従うCoroutineScopeの生成 val LifecycleOwner.lifecycleScope: CoroutineScope ViewModel
// ViewModelに従うCoroutineScopeの生成 val ViewModel.viewModelScope: CoroutineScope WorkManager
abstract class CoroutineWorker( appContext: Context, params: WorkerParameters ) : ListenableWorker(appContext, params) { // suspendメソッドで定義された abstract suspend fun doWork(): Result } Room
// Dao内でsuspendメソッドが使える @Dao interface HogesDao { @Insert suspend fun add(hoge: Hoge) @Query(&amp;#34;SELECT * FROM hoge WHERE id = :id&amp;#34;) suspend fun get(id: String): Hoge .</description>
    </item>
    
    <item>
      <title>Coroutine &#43; AutoDisposeを作ってみた</title>
      <link>https://satoshun.github.io/2018/12/coroutine_autodispose/</link>
      <pubDate>Sun, 23 Dec 2018 09:14:43 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2018/12/coroutine_autodispose/</guid>
      <description>Coroutine + AutoDisposeの実装について考えてみました。結論から言うと、ContinuationInterceptorを使えば上手くいきそうです。
ContinuationInterceptorとは? ContinuationInterceptorは次のようなインターフェースです。
/** * Marks coroutine context element that intercepts coroutine continuations. * The coroutines framework uses [ContinuationInterceptor.Key] to retrieve the interceptor and * intercepts all coroutine continuations with [interceptContinuation] invocations. */ @SinceKotlin(&amp;#34;1.3&amp;#34;) public interface ContinuationInterceptor : CoroutineContext.Element { public fun &amp;lt;T&amp;gt; interceptContinuation(continuation: Continuation&amp;lt;T&amp;gt;): Continuation&amp;lt;T&amp;gt; public fun releaseInterceptedContinuation(continuation: Continuation&amp;lt;*&amp;gt;) ... } interceptContinuationからContinuationを受け取ることができ、Continuationは自身のCoroutineContextを持っているので、そこからJobを取得することが出来ます。それを利用することでAndroid Lifecycleと協調して動くContinuationInterceptorを実装することが出来ます。
class LifecycleContinuationInterceptor( private val lifecycle: Lifecycle ) : ContinuationInterceptor { override val key: CoroutineContext.Key&amp;lt;*&amp;gt; get() = ContinuationInterceptor override fun &amp;lt;T&amp;gt; interceptContinuation(continuation: Continuation&amp;lt;T&amp;gt;): Continuation&amp;lt;T&amp;gt; { // ContinuationからJobを取得 val job = continuation.</description>
    </item>
    
    <item>
      <title>Kotlin Coroutineを導入したらどれだけビルドタイムが増えそうか検証した</title>
      <link>https://satoshun.github.io/2018/12/coroutine_build_perf/</link>
      <pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2018/12/coroutine_build_perf/</guid>
      <description>注意: 計測方法は実環境に全く即していないので意味がない可能性が高いです。
環境 AGP3.4.0-alpha06 Kotlin 1.3.10 Kotlinx.coroutine 1.0.1 Gradle 5.0 比較対象 kotlinx.coroutineを使ったサンプル クラス数 300 各クラスは7つのメソッドを持ち、その中でcoroutine builderやsuspend関数をコールしている 300 * 7の2100箇所がCoroutine関連のコードになります kotlinx.coroutineを使わないサンプル クラス数 300 各クラスは7つのメソッドを持ち、その中で適当なメソッド（Handler().post {}）をコールしている サンプルコード 計測コマンド Build Scanを使って計測します。その際。build-cacheはoffにします。
./gradlew clean ./gradlew build --no-build-cache --scan 両サンプルのクラス数、メソッド数を合わせただけなので、全く正当な比較でないことを留意ください。 また試行回数は10回程度で、最終結果のみを以下に掲載します。
kotlinx.coroutineを使う Time spent executing tasks 1m 16.034s All tasks	207	2m 42.833s Tasks avoided	12 (09.7%)	0.062s From cache	0 (00.0%)	0.000s Up-to-date	12 (09.7%)	0.062s Tasks executed	112 (90.3%)	2m 42.739s Cacheable	0 (00.</description>
    </item>
    
  </channel>
</rss>
