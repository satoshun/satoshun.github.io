<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>isucon on stsnブログ</title>
    <link>https://satoshun.github.io/tags/isucon/</link>
    <description>Recent content in isucon on stsnブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Mon, 07 Oct 2019 22:51:53 +0000</lastBuildDate><atom:link href="https://satoshun.github.io/tags/isucon/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ISUCON9 決勝参加ログ</title>
      <link>https://satoshun.github.io/2019/10/isucon2019-final/</link>
      <pubDate>Mon, 07 Oct 2019 22:51:53 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/10/isucon2019-final/</guid>
      <description>ISUCON9の決勝に出場してきました。最終スコアは再起動試験失敗の、参考スコアは3,611でした:D
やったことと、反省点を簡単にまとめておきます。選択言語はGoです。
やったこと 最初の1時間くらい 適当にブラウザから、サイトを触ってみる アプリコード読む 何か無駄なログ多いなぁ〜と思ったけど、今思えばヒントだったっぽい /api/train/searchのN+1の削除、クエリ最適化 /api/train/searchでベンチマークがタイムアウトしていたので、ここを解決するのが最優先だと思った ただ、実装が上手く行かなくて最初のスコアが出るのが遅すぎた。INDEX貼るとか、簡単な方法を考えたほうが良かったかもしれない /api/train/seatsのN+1の削除、クエリ最適化 計測の結果、次の2番目のボトルネックだった こっちは割とスムーズに出来た seat_masterなどのインメモリ化 insertがないテーブルをインメモリにすればいいんちゃうと思ってやった いろいろINDEX貼ったりとか 反省点 ほんまに練習不足 Docker分かんなすぎてハゲそうだった N+1とかもっとスムーズに解決しないとね 全体的な流れを把握しようとしなかったので、もう駄目 局所的に攻めても、なかなかスコア上がんないんだよね 来年 優勝します💁 </description>
    </item>
    
    <item>
      <title>ISUCON9 予選ログ</title>
      <link>https://satoshun.github.io/2019/09/isucon2019-qualify/</link>
      <pubDate>Wed, 11 Sep 2019 02:14:03 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/09/isucon2019-qualify/</guid>
      <description>ISUCON9にチームSsstohで会社の友達と参加してきました。最終スコアは11,860で、無事に本線に出場出来ることになりました:D
僕がやったことをつらつらと反省とともに、ログに残して置こうと思います。
ちなみに言語はGoです。
僕がやったこと 朝 寝坊しました ISUCON起床失敗
&amp;mdash; Sato Shun🧁 (@stsn_jp) September 7, 2019 12:00くらいまで アプリケーションコード読んだり、alpの結果見たり、スロークエリログに対してIndexを適当に貼ってみたりしてた スコアほぼ変わらず。それはそう 12:00から /users/transactions.jsonが遅そうだったので、そこを潰す USERの取得などがN+1クエリだったので、それを IN句に置き換え 道中、外部APIを叩いてるところがボトルネックっぽいことに気づく ここらへんの修正で、確かスコアが5000~6000くらい（他の人の修正も入っているので、これだけではないです） 16:30くらい /new_items/:root_category_id.json、/new_items.jsonのN+1クエリログを倒す ここらへんで確か8000~9000くらい 17:30くらい 他の人のPRみたり、静的ファイルをNginxから返すようにしてた ここらへんで10000~くらい 最後らへん ログを出力しないようにしたり修正 ここらへんで最終スコアの11,860くらい こんな感じ
反省点 3台構成に出来なかった 練習不足で時間が足りなかったんやなって キャンペーンモードを忘れていた READMEはちゃんと読もうな ログインにボトルネックがあることに気づかなかった pprofしていこうな SQLの書き方が記憶から失われていた 頑張っていこうな 寝坊しない それは無理かもしれない まとめ 本線頑張るぞ〜😃 </description>
    </item>
    
    <item>
      <title>ISUCON6予選で悲しくも負けてしまいました</title>
      <link>https://satoshun.github.io/2016/09/isucon6/</link>
      <pubDate>Sat, 10 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2016/09/isucon6/</guid>
      <description>ISUCON6予選で悲しくも負けてしまいました こんにちは. ISUCON6に3人チーム「ウルド」として出場したのですが, 悲しくも予選落ちをしてしまいました.
ベストスコアは99,000点, 最終スコアは76,000点で, ベストスコアなら予選を突破できていただけに非常に悔しく思っています.
今回は, 予選で何をしたかと反省を書きたいと思います. 反省ブログです.
基本的なメンバーのスペック Golangで勝負しました. 最初の実装では正規表現をバリバリに使っていて, スコアが0の状態だったのでPythonにしようか悩んだのですが, 最終的には言語の差はほぼ出ないだろうとの予測でGolangで勝負することにしました.
メンバーの簡単な役割分担は以下の感じです.
僕(アプリ: Golang) メンバーその1(インフラ+アプリ) メンバーその2(インフラ+アプリ) 僕がアプリを中心に直して, 2人にはボトルネックの検出や, 全体的な流れを見てもらう感じになっています. とはいえ, かっちりこの役割というわけではなく, 時間に応じて役割を切り分けながらという感じで柔軟にいけたかなと思ってます.
最初の2時間くらい とにかくGoの初期実装がスコア0なので, そこから脱却するためにいろいろと細かいところをチューニングしたのですが効果が出ず.
プロファイリングしてみると, アプリプロセスがCPUを使い果たしていてパフォーマンスが出ていない模様.
そしてなんやかんやと, メンバーが正規表現をバリバリ使っている「htmlify」の部分が遅いことを突き止めてくれたのでそこを中心に勝負することに.
12時くらいの段階 テキストに対してキーワードリンクを挿入する箇所で, 正規表現のorを使っている箇所を発見.
re := regexp.MustCompile(&amp;#34;(&amp;#34; + strings.Join(keywords, &amp;#34;|&amp;#34;) + &amp;#34;)&amp;#34;) keywordsは7,000以上なのでここが明らかにボトルネック.
そういえば, 昔naoyaさんのブログではてなのキーワードリンクがスケールしなくなったときに, 何かアルゴリズムを使って解決したみたいな記事があったことを思い出して死ぬ気でググる.
その結果 Aho Corasick というアルゴリズムを発見. これ使えばいけるんじゃね? ということでGolangで Aho Corasick のライブラリがないかを死ぬ気でググる.
その結果, https://github.com/anknown/ahocorasick を発見. よく分かんないけどこれを死ぬ気でアプリに適応させる.
13:30くらい 何かよく分かんないけど動いた! そしてスコアは15,000くらいになる!
これでhtmlifyは大丈夫だと思い, keywordをredisでリストで保持して, MySQLのクエリを減らす作業に入る.
これがミスでした. htmlifyのコストがまだ高く, ここをもう少し重点的にやるべきだった.</description>
    </item>
    
  </channel>
</rss>
