<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>viewpager2 on stsnブログ</title>
    <link>https://satoshun.github.io/tags/viewpager2/</link>
    <description>Recent content in viewpager2 on stsnブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Sun, 13 Oct 2019 05:23:44 +0000</lastBuildDate><atom:link href="https://satoshun.github.io/tags/viewpager2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ViewPager2で要素をループさせる</title>
      <link>https://satoshun.github.io/2019/10/viewpager2-loop/</link>
      <pubDate>Sun, 13 Oct 2019 05:23:44 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/10/viewpager2-loop/</guid>
      <description>ViewPager2で要素をループさせる方法の紹介です。いわゆる循環リストです。
ViewPager2ではRecyclerViewを使うことが出来るので、RecyclerViewと同じような実装で実現することが出来ます。
最終的にこんなのが作れます。（a、b、cの要素でループしている）
 今回の検証に用いたコードは、satoshun/ViewPager2にあります😃
では、コードを説明していきます。今回は、1つのViewTypeを扱います。
実際のコード まず、RecyclerView.Adapterのサイズを決めるgetItemCountメソッドの実装です。 限りなく大きい値、Int.MAX_VALUEを返します。
override fun getItemCount(): Int = Int.MAX_VALUE 次に、onBindViewHolderメソッドを次のように実装します。
private val itemData: List&amp;lt;Data&amp;gt;  override fun onBindViewHolder(holder: InfiniteViewHolder, position: Int) {  val data = itemData[position % itemData.size]  ... } itemDataにはViewの生成に必要な実際のデータが入っています。position % itemData.sizeとindexを取ることで、ループ中のどこの位置にいるかを特定することが出来ます。
最終的な、RecyclerView.Adapterは次のようになります。（onCreateViewHolderメソッドは重要でないので、省略しています）
class InfiniteAdapter(  private val itemData: List&amp;lt;Data&amp;gt; ) : RecyclerView.Adapter&amp;lt;InfiniteViewHolder&amp;gt;() {   override fun getItemCount(): Int = Int.MAX_VALUE   override fun onCreateViewHolder(parent: ViewGroup, viewType: Int) = .</description>
    </item>
    
    <item>
      <title>ViewPager2でカルーセルっぽいものを実装する</title>
      <link>https://satoshun.github.io/2019/08/viewpager2-like-a-carousel/</link>
      <pubDate>Thu, 29 Aug 2019 13:29:06 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/08/viewpager2-like-a-carousel/</guid>
      <description>横のアイテムをチラ見せする画面をViewPager2で書けるよって話です。
最終的にこんなのが作れます。
 では、コードを説明していきます。
1. 横のアイテムをチラ見せする まず、ViewPager2をLayout内に定義します。
&amp;lt;androidx.viewpager2.widget.ViewPager2  android:id=&amp;#34;@+id/viewpager&amp;#34;  android:layout_width=&amp;#34;match_parent&amp;#34;  android:layout_height=&amp;#34;200dp&amp;#34;  android:orientation=&amp;#34;horizontal&amp;#34;  /&amp;gt; 次に、横のアイテムをどれだけチラ見せるかを定義します。
&amp;lt;dimen name=&amp;#34;offset&amp;#34;&amp;gt;32dp&amp;lt;/dimen&amp;gt; 次に、各アイテム間にどれだけのマージンをつけるかを定義します。
&amp;lt;dimen name=&amp;#34;page_margin&amp;#34;&amp;gt;16dp&amp;lt;/dimen&amp;gt; 次に、ViewPager2内で使うレイアウトのトップレベルのViewにmarginLeft、Rightをセットします。
&amp;lt;com.google.android.material.card.MaterialCardView  android:layout_width=&amp;#34;match_parent&amp;#34;  android:layout_height=&amp;#34;match_parent&amp;#34;  android:layout_marginLeft=&amp;#34;48dp&amp;#34; // これは、offset + page_marginの値  android:layout_marginRight=&amp;#34;48dp&amp;#34;  app:cardCornerRadius=&amp;#34;16dp&amp;#34;&amp;gt;  ... marginには前で定義したoffset、page_marginを足し合わせたものを指定します。
そして、最後にPageTransformerを設定します。
viewpager.offscreenPageLimit = 2 // これは左右のアイテムを描画するために必要  val pageMarginPx = root.context.resources.getDimensionPixelOffset(R.dimen.page_margin) val offsetPx = root.context.resources.getDimensionPixelOffset(R.dimen.offset) viewpager.setPageTransformer { page, position -&amp;gt;  val offset = position * (2 * offsetPx + pageMarginPx)  page.</description>
    </item>
    
    <item>
      <title>ViewPager2 with TabLayout</title>
      <link>https://satoshun.github.io/2019/05/viewpager2-with-tablayout/</link>
      <pubDate>Fri, 17 May 2019 04:08:42 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/05/viewpager2-with-tablayout/</guid>
      <description>Material ComponentsでViewPager2 + TabLayoutのコードが入ったのでそれの紹介。まだalphaへのリリースもされていないので、APIは大きく変わるかもしれません。おそらく1.1.0-alpha07に入ってくると思います。
TabLayoutはViewPagerでサポートされていましたが、それがViewPager2にも来たって感じです。
使い方 新しく追加されたTabLayoutMediatorを使います。
まず、TabLayoutMediatorインスタンスを生成します。
val viewPager: ViewPager2 = findViewById(R.id.viewpager) val tabLayout: TabLayout = findViewById(R.id.tab) val mediator = TabLayoutMediator(tabLayout, viewPager) { tab: TabLayout.Tab, position: Int -&amp;gt;  tab.text = &amp;#34;test $position&amp;#34; // タブにタイトルをセット } コンストラクタには、TabLayout、ViewPager2、OnConfigureTabCallbackを渡します。 OnConfigureTabCallbackは、tabとpositionを受け取り、tabに対して、タイトルをセットします。 ViewPagerのPageAdapterとは違い、RecyclerViewのAdapterからはタイトルを取得できないので、このような変更になったと思われます。
最後にattach関数を呼び出します。
mediator.attach() これで、ViewPager2 + TabLayoutを実現できます。とても簡単！！
まとめ  ViewPager2もエコシステムが整いつつある😊 今回試したサンプルコードは satoshun-android-example/ViewPager2にあります😃  </description>
    </item>
    
  </channel>
</rss>
