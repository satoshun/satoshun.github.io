<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Oop on stsnブログ</title>
    <link>https://satoshun.github.io/tags/oop/</link>
    <description>Recent content in Oop on stsnブログ</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Tue, 25 Dec 2018 03:00:39 +0000</lastBuildDate>
    <atom:link href="https://satoshun.github.io/tags/oop/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>感想: オブジェクト指向設計実践ガイド ~Rubyでわかる 進化しつづける柔軟なアプリケーションの育て方</title>
      <link>https://satoshun.github.io/2018/12/object_oriented_practical_guide/</link>
      <pubDate>Tue, 25 Dec 2018 03:00:39 +0000</pubDate>
      <guid>https://satoshun.github.io/2018/12/object_oriented_practical_guide/</guid>
      <description>&lt;p&gt;オブジェクト指向設計実践ガイド ~Rubyでわかる 進化しつづける柔軟なアプリケーションの育て方を読んだのでざっくりと感想。&lt;/p&gt;&#xA;&lt;p&gt;継承とコンポジションはトレードオフ&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;継承は自動的にaメッセージを委譲する&#xA;&lt;ul&gt;&#xA;&lt;li&gt;便利だが依存関係は強い&lt;/li&gt;&#xA;&lt;li&gt;親クラスが変更されたときに、自動的に子クラスにも影響があることを意味する&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;継承は階層構造を生み出す&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ポリモーフィズムを実現する&lt;/li&gt;&#xA;&lt;li&gt;これまた便利だが依存関係は強い&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;コンポジションは自動的に委譲しない&#xA;&lt;ul&gt;&#xA;&lt;li&gt;必要に応じて集約クラスで操る必要がある&lt;/li&gt;&#xA;&lt;li&gt;依存は継承より少ない&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;単一責任について&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;あたりまえだけど守らないといけない&#xA;&lt;ul&gt;&#xA;&lt;li&gt;無駄な責務があると再利用できない&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;達成することで再利用可能な素晴らしいクラスが出来る&lt;/li&gt;&#xA;&lt;li&gt;責任の依存先が不明なときは一旦privateとかに切り出しておいて未来に託す&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;ダックタイピング&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ダックにより、具体的なGearクラスからロールへのマインドシフトが出来る&lt;/li&gt;&#xA;&lt;li&gt;ロールを満たすことにより要件を満たす&lt;/li&gt;&#xA;&lt;li&gt;実装には依存しない、メッセージを送るだけで良い世界はOOPの真骨頂&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;依存関係について&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;依存関係の向きを考えるのは大切&#xA;&lt;ul&gt;&#xA;&lt;li&gt;例えばコンストラクタ内で依存するのと、インスタンスメソッドだと距離が違う。コンストラクタ内で依存したほうが良い&#xA;&lt;ul&gt;&#xA;&lt;li&gt;さらに進めるとDI，コンストラクタの外から注入する&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;依存関係逆転の法則&#xA;&lt;ul&gt;&#xA;&lt;li&gt;低レイヤーに依存するのではなく、インターフェースに依存しておいて、あとから実装を注入することで達成&#xA;&lt;ul&gt;&#xA;&lt;li&gt;domain層などの他の層に依存したくない層で有効&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;柔軟なインターフェース&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;オブジェクトを信じるようなインターフェース&#xA;&lt;ul&gt;&#xA;&lt;li&gt;どのようにするかではなく、何をするかをメソッド名にする。宣言的に&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;安定していなければいけない&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
