<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>constraintlayout on stsnブログ</title>
    <link>https://satoshun.github.io/tags/constraintlayout/</link>
    <description>Recent content in constraintlayout on stsnブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Thu, 30 Apr 2020 04:38:16 +0000</lastBuildDate><atom:link href="https://satoshun.github.io/tags/constraintlayout/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ちょっと複雑なレイアウトをConstraintLayoutで組んでみるpart2</title>
      <link>https://satoshun.github.io/2020/04/constraintlayout-practical2/</link>
      <pubDate>Thu, 30 Apr 2020 04:38:16 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2020/04/constraintlayout-practical2/</guid>
      <description>今回の記事では次の4つのレイアウトを、ConstraintLayoutで組みたいと思います。
ポイントは以下の２つです。
各画像は、前の画像に被っている 各レイアウトは、4 or 3 or 2 or 1枚、いずれかの枚数を取る 上記で上げたポイントを中心に説明していきます。
各画像は、前の画像に被っている View同士を被せる方法はいくつかあると思うんですが、今回はlayout_constraintStart_toStartOfとlayout_marginStartを使い表現します。
まずに、1番左に配置するImageViewを定義します。
&amp;lt;com.google.android.material.imageview.ShapeableImageView android:id=&amp;#34;@+id/image1&amp;#34; android:layout_width=&amp;#34;32dp&amp;#34; android:layout_height=&amp;#34;32dp&amp;#34; android:layout_marginStart=&amp;#34;20dp&amp;#34; android:layout_marginBottom=&amp;#34;12dp&amp;#34; app:layout_constraintBottom_toBottomOf=&amp;#34;parent&amp;#34; app:layout_constraintStart_toStartOf=&amp;#34;parent&amp;#34; /&amp;gt; 1番左に配置したいので、Start_toStartOfにはparentを設定しています。
次に、2番目に配置するImageViewを考えます。このImageViewは、1枚目のImageViewに被るように配置します。なので、この1枚目のViewのend(終端)に制約を合わせてしまうと上手く配置できません。 よって、1枚目のViewのstart(先端)に制約を合わせます。合わせてmarginStartも設定することで良い感じの配置が出来ます。
&amp;lt;com.google.android.material.imageview.ShapeableImageView android:id=&amp;#34;@+id/image2&amp;#34; android:layout_width=&amp;#34;32dp&amp;#34; android:layout_height=&amp;#34;32dp&amp;#34; android:layout_marginStart=&amp;#34;24dp&amp;#34; android:layout_marginBottom=&amp;#34;12dp&amp;#34; app:layout_constraintBottom_toBottomOf=&amp;#34;parent&amp;#34; app:layout_constraintStart_toStartOf=&amp;#34;@id/image1&amp;#34; /&amp;gt; 3番目、4番目のViewにも同様の制約を設定してあげます。最終形は次のようになります。
&amp;lt;com.google.android.material.imageview.ShapeableImageView android:id=&amp;#34;@+id/image1&amp;#34; android:layout_width=&amp;#34;32dp&amp;#34; android:layout_height=&amp;#34;32dp&amp;#34; android:layout_marginStart=&amp;#34;20dp&amp;#34; android:layout_marginBottom=&amp;#34;12dp&amp;#34; app:layout_constraintBottom_toBottomOf=&amp;#34;parent&amp;#34; app:layout_constraintStart_toStartOf=&amp;#34;parent&amp;#34; /&amp;gt; &amp;lt;com.google.android.material.imageview.ShapeableImageView android:id=&amp;#34;@+id/image2&amp;#34; android:layout_width=&amp;#34;32dp&amp;#34; android:layout_height=&amp;#34;32dp&amp;#34; android:layout_marginStart=&amp;#34;24dp&amp;#34; android:layout_marginBottom=&amp;#34;12dp&amp;#34; app:layout_constraintBottom_toBottomOf=&amp;#34;parent&amp;#34; app:layout_constraintStart_toStartOf=&amp;#34;@id/image1&amp;#34; /&amp;gt; &amp;lt;com.google.android.material.imageview.ShapeableImageView android:id=&amp;#34;@+id/image3&amp;#34; android:layout_width=&amp;#34;32dp&amp;#34; android:layout_height=&amp;#34;32dp&amp;#34; android:layout_marginStart=&amp;#34;24dp&amp;#34; android:layout_marginBottom=&amp;#34;12dp&amp;#34; app:layout_constraintBottom_toBottomOf=&amp;#34;parent&amp;#34; app:layout_constraintStart_toStartOf=&amp;#34;@id/image2&amp;#34; /&amp;gt; &amp;lt;com.google.android.material.imageview.ShapeableImageView android:id=&amp;#34;@+id/image4&amp;#34; android:layout_width=&amp;#34;32dp&amp;#34; android:layout_height=&amp;#34;32dp&amp;#34; android:layout_marginStart=&amp;#34;24dp&amp;#34; android:layout_marginBottom=&amp;#34;12dp&amp;#34; app:layout_constraintBottom_toBottomOf=&amp;#34;parent&amp;#34; app:layout_constraintStart_toStartOf=&amp;#34;@id/image3&amp;#34; /&amp;gt; 1枚目、2枚目、3枚目、4枚目がそれぞれ少しずつ被っているのが分かると思います。</description>
    </item>
    
    <item>
      <title>ちょっと複雑なレイアウトをConstraintLayoutで組んでみるpart1</title>
      <link>https://satoshun.github.io/2020/04/constraintlayout-practical1/</link>
      <pubDate>Tue, 07 Apr 2020 00:41:08 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2020/04/constraintlayout-practical1/</guid>
      <description>今回の記事では次のレイアウトを、ConstraintLayoutで組みたいと思います。
ポイントは以下の3つです。
4つの画像を組み合わせて、1つの円形画像を作る部分 01/01の部分は右に、@your_idの部分はYour Nameの右に配置される Your Nameの部分の文字数が多いときに、&amp;hellip;で省略される 今回は、4つの画像を組み合わせる部分で、Material ComponentのShapeableImageViewを使っています。ShapeableImageViewの説明はここを見てください。
上記で上げたポイントを中心に説明していきます。
4つの画像を組み合わせて、1つの円形画像を作る部分 この部分は、Picasso、Glideなどの画像ライブラリに頼るパターンもあると思うんですが、今回はShapeableImageViewを使いたいと思います。
4つのShapeableImageViewを使い、それぞれ「左上、右上、左下、右下」の部分が丸くなるShapeを定義します。 左上を丸くするShapeは次のように定義できます。
&amp;lt;style name=&amp;#34;ShapeAppearanceOverlay.Example.TopLeft&amp;#34; parent=&amp;#34;&amp;#34;&amp;gt; &amp;lt;item name=&amp;#34;cornerFamilyTopLeft&amp;#34;&amp;gt;rounded&amp;lt;/item&amp;gt; &amp;lt;item name=&amp;#34;cornerSizeTopLeft&amp;#34;&amp;gt;100%&amp;lt;/item&amp;gt; &amp;lt;/style&amp;gt; 右の画像が、上のShapeを指定した場合になります。
右上、左下、右下のShapeも同じように作ってあげます。そして、それら4つViewの制約を次のように作ってあげます。
&amp;lt;com.google.android.material.imageview.ShapeableImageView android:id=&amp;#34;@+id/top_left&amp;#34; android:layout_width=&amp;#34;30dp&amp;#34; android:layout_height=&amp;#34;30dp&amp;#34; android:adjustViewBounds=&amp;#34;true&amp;#34; android:scaleType=&amp;#34;centerCrop&amp;#34; app:layout_constraintStart_toStartOf=&amp;#34;parent&amp;#34; app:layout_constraintTop_toTopOf=&amp;#34;parent&amp;#34; app:shapeAppearanceOverlay=&amp;#34;@style/ShapeAppearanceOverlay.Example.TopLeft&amp;#34; tools:src=&amp;#34;@tools:sample/avatars&amp;#34; /&amp;gt; &amp;lt;com.google.android.material.imageview.ShapeableImageView android:id=&amp;#34;@+id/top_right&amp;#34; android:layout_width=&amp;#34;30dp&amp;#34; android:layout_height=&amp;#34;30dp&amp;#34; android:adjustViewBounds=&amp;#34;true&amp;#34; android:scaleType=&amp;#34;centerCrop&amp;#34; app:layout_constraintStart_toEndOf=&amp;#34;@id/top_left&amp;#34; app:layout_constraintTop_toTopOf=&amp;#34;@id/top_left&amp;#34; app:shapeAppearanceOverlay=&amp;#34;@style/ShapeAppearanceOverlay.Example.TopRight&amp;#34; tools:src=&amp;#34;@tools:sample/avatars&amp;#34; /&amp;gt; &amp;lt;com.google.android.material.imageview.ShapeableImageView android:id=&amp;#34;@+id/bottom_left&amp;#34; android:layout_width=&amp;#34;30dp&amp;#34; android:layout_height=&amp;#34;30dp&amp;#34; android:adjustViewBounds=&amp;#34;true&amp;#34; android:scaleType=&amp;#34;centerCrop&amp;#34; app:layout_constraintStart_toStartOf=&amp;#34;@id/top_left&amp;#34; app:layout_constraintTop_toBottomOf=&amp;#34;@id/top_left&amp;#34; app:shapeAppearanceOverlay=&amp;#34;@style/ShapeAppearanceOverlay.Example.BottomLeft&amp;#34; tools:src=&amp;#34;@tools:sample/avatars&amp;#34; /&amp;gt; &amp;lt;com.google.android.material.imageview.ShapeableImageView android:id=&amp;#34;@+id/bottom_right&amp;#34; android:layout_width=&amp;#34;30dp&amp;#34; android:layout_height=&amp;#34;30dp&amp;#34; android:adjustViewBounds=&amp;#34;true&amp;#34; android:scaleType=&amp;#34;centerCrop&amp;#34; app:layout_constraintStart_toEndOf=&amp;#34;@id/bottom_left&amp;#34; app:layout_constraintTop_toTopOf=&amp;#34;@id/bottom_left&amp;#34; app:shapeAppearanceOverlay=&amp;#34;@style/ShapeAppearanceOverlay.Example.BottomRight&amp;#34; tools:src=&amp;#34;@tools:sample/avatars&amp;#34; /&amp;gt; やっていることは単純で、4つのViewをapp:layout_constraintStart_toStartOfなどを使って適切な位置に配置しています。
これで4つの画像を組み合わせて、円形の画像を表現するところまで出来ました。</description>
    </item>
    
    <item>
      <title>ConstraintLayout Flowの紹介</title>
      <link>https://satoshun.github.io/2019/04/constraintlayout-flow/</link>
      <pubDate>Sun, 28 Apr 2019 11:13:20 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/04/constraintlayout-flow/</guid>
      <description>ConstraintLayoutの2.0.0 alpha 5にFlow Virtual Layoutが導入されました🎉 Flowを使うことで、対象のViewを様々なルールで並べることができます。
メリットとしては、次のようなものがあります。
Viewの階層をフラットに保つことが出来る Flowは普通のViewのように扱う事ができる MotionLayoutと相性が良い では、どのように書くのかを見ていきます。
1. 配置する方向を決める android:orientationから、horizontal or verticalを指定できます。
&amp;lt;androidx.constraintlayout.widget.ConstraintLayout android:layout_width=&amp;#34;match_parent&amp;#34; android:layout_height=&amp;#34;match_parent&amp;#34;&amp;gt; &amp;lt;androidx.constraintlayout.helper.widget.Flow android:id=&amp;#34;@+id/flow&amp;#34; android:layout_width=&amp;#34;0dp&amp;#34; android:layout_height=&amp;#34;0dp&amp;#34; android:orientation=&amp;#34;horizontal&amp;#34; android:background=&amp;#34;@android:color/white&amp;#34; app:layout_constraintBottom_toBottomOf=&amp;#34;parent&amp;#34; app:layout_constraintEnd_toEndOf=&amp;#34;parent&amp;#34; app:layout_constraintStart_toStartOf=&amp;#34;parent&amp;#34; app:layout_constraintTop_toTopOf=&amp;#34;parent&amp;#34; /&amp;gt; ... これはorientationにhorizontalを持ちます。また、通常のViewのように各constraintsを指定し、配置することができます。
2. wrapModeを決める flow_wrapModeで指定することができます。
wrapModeでは、どのようにViewを並べるかを指定でき、3種類のmodeがあります。
none 単純にsingle lineに並べる chain 単純に順番に配置していく。その行（列）に収まらない場合は次の行（列）に配置する aligned 各要素を整列するように配置していく。テーブルのようなイメージ &amp;lt;androidx.constraintlayout.helper.widget.Flow android:id=&amp;#34;@+id/flow&amp;#34; android:layout_width=&amp;#34;0dp&amp;#34; android:layout_height=&amp;#34;0dp&amp;#34; android:orientation=&amp;#34;horizontal&amp;#34; android:background=&amp;#34;@android:color/white&amp;#34; app:flow_wrapMode=&amp;#34;chain&amp;#34; app:layout_constraintBottom_toBottomOf=&amp;#34;parent&amp;#34; app:layout_constraintEnd_toEndOf=&amp;#34;parent&amp;#34; app:layout_constraintStart_toStartOf=&amp;#34;parent&amp;#34; app:layout_constraintTop_toTopOf=&amp;#34;parent&amp;#34; /&amp;gt; これはchainで対象のViewを配置します。
3. 対象のViewを指定する constraint_referenced_idsから指定します。
&amp;lt;androidx.constraintlayout.widget.ConstraintLayout android:layout_width=&amp;#34;match_parent&amp;#34; android:layout_height=&amp;#34;match_parent&amp;#34;&amp;gt; &amp;lt;androidx.constraintlayout.helper.widget.Flow android:id=&amp;#34;@+id/flow&amp;#34; android:layout_width=&amp;#34;0dp&amp;#34; android:layout_height=&amp;#34;0dp&amp;#34; android:orientation=&amp;#34;horizontal&amp;#34; app:flow_wrapMode=&amp;#34;chain&amp;#34; android:background=&amp;#34;@android:color/white&amp;#34; app:constraint_referenced_ids=&amp;#34;title1,title2,title3&amp;#34; app:layout_constraintBottom_toBottomOf=&amp;#34;parent&amp;#34; app:layout_constraintEnd_toEndOf=&amp;#34;parent&amp;#34; app:layout_constraintStart_toStartOf=&amp;#34;parent&amp;#34; app:layout_constraintTop_toTopOf=&amp;#34;parent&amp;#34; /&amp;gt; &amp;lt;TextView android:id=&amp;#34;@+id/title1&amp;#34; android:layout_width=&amp;#34;wrap_content&amp;#34; android:layout_height=&amp;#34;wrap_content&amp;#34; android:text=&amp;#34;chain1&amp;#34; android:textColor=&amp;#34;@android:color/black&amp;#34; android:textSize=&amp;#34;20sp&amp;#34; /&amp;gt; &amp;lt;TextView android:id=&amp;#34;@+id/title2&amp;#34; android:layout_width=&amp;#34;wrap_content&amp;#34; android:layout_height=&amp;#34;wrap_content&amp;#34; android:text=&amp;#34;chain2&amp;#34; android:textColor=&amp;#34;@android:color/black&amp;#34; android:textSize=&amp;#34;20sp&amp;#34; /&amp;gt; &amp;lt;TextView android:id=&amp;#34;@+id/title3&amp;#34; android:layout_width=&amp;#34;wrap_content&amp;#34; android:layout_height=&amp;#34;wrap_content&amp;#34; android:text=&amp;#34;chain3&amp;#34; android:textColor=&amp;#34;@android:color/black&amp;#34; android:textSize=&amp;#34;50sp&amp;#34; /&amp;gt; .</description>
    </item>
    
    <item>
      <title>ConstraintLayoutのImageFilterViewって単体でも使えるんやなって</title>
      <link>https://satoshun.github.io/2019/04/constraintlayout-imagefilterview/</link>
      <pubDate>Mon, 15 Apr 2019 13:17:53 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/04/constraintlayout-imagefilterview/</guid>
      <description>ConstraintLayout 2.0.0-alphaからImageFilterViewクラスが追加されました。今まで、MotionLayoutと一緒に使うものだから、使い所限られそうだなぁ〜と思っていたのですが、単体でも使えそうだったので、その報告記事になります。
この記事ではConstraintLayout 2.0.0-alpha4を使っています。
角丸にする round属性から指定する事ができます。
&amp;lt;androidx.constraintlayout.utils.widget.ImageFilterView android:id=&amp;#34;@+id/image&amp;#34; android:layout_width=&amp;#34;100dp&amp;#34; android:layout_height=&amp;#34;100dp&amp;#34; app:layout_constraintBottom_toBottomOf=&amp;#34;parent&amp;#34; app:layout_constraintEnd_toEndOf=&amp;#34;parent&amp;#34; app:layout_constraintStart_toStartOf=&amp;#34;parent&amp;#34; app:layout_constraintTop_toTopOf=&amp;#34;parent&amp;#34; app:round=&amp;#34;0.5dp&amp;#34; /&amp;gt; 彩度 saturation属性から設定することが出来ます。
&amp;lt;androidx.constraintlayout.utils.widget.ImageFilterView android:id=&amp;#34;@+id/image&amp;#34; android:layout_width=&amp;#34;100dp&amp;#34; android:layout_height=&amp;#34;100dp&amp;#34; app:layout_constraintStart_toStartOf=&amp;#34;parent&amp;#34; app:layout_constraintTop_toTopOf=&amp;#34;parent&amp;#34; app:round=&amp;#34;0.5dp&amp;#34; app:saturation=&amp;#34;0.1&amp;#34; /&amp;gt; コントラスト contrast属性から設定することが出来ます。
&amp;lt;androidx.constraintlayout.utils.widget.ImageFilterView android:id=&amp;#34;@+id/image&amp;#34; android:layout_width=&amp;#34;100dp&amp;#34; android:layout_height=&amp;#34;100dp&amp;#34; app:contrast=&amp;#34;0.5&amp;#34; app:layout_constraintStart_toStartOf=&amp;#34;parent&amp;#34; app:layout_constraintTop_toTopOf=&amp;#34;parent&amp;#34; app:round=&amp;#34;0.5dp&amp;#34; /&amp;gt; 暖色、寒色 warmth属性から、暖色、寒色？を設定することできます。
&amp;lt;androidx.constraintlayout.utils.widget.ImageFilterView android:id=&amp;#34;@+id/image&amp;#34; android:layout_width=&amp;#34;100dp&amp;#34; android:layout_height=&amp;#34;100dp&amp;#34; app:layout_constraintStart_toStartOf=&amp;#34;parent&amp;#34; app:layout_constraintTop_toTopOf=&amp;#34;parent&amp;#34; app:round=&amp;#34;0.5dp&amp;#34; app:warmth=&amp;#34;2&amp;#34; /&amp;gt; &amp;lt;androidx.constraintlayout.utils.widget.ImageFilterView android:id=&amp;#34;@+id/image&amp;#34; android:layout_width=&amp;#34;100dp&amp;#34; android:layout_height=&amp;#34;100dp&amp;#34; app:layout_constraintStart_toStartOf=&amp;#34;parent&amp;#34; app:layout_constraintTop_toTopOf=&amp;#34;parent&amp;#34; app:round=&amp;#34;0.5dp&amp;#34; app:warmth=&amp;#34;0.5&amp;#34; /&amp;gt; クロスフェード crossfade属性から設定することが出来ます。ただ、この属性はMotionLayoutと一緒に使うもので、単体では使わないと思います。
まとめ ImageFilterView、単体でも結構使いどころあるかも😃 </description>
    </item>
    
    <item>
      <title>Android: ContraintLayoutでネガティブマージンを実現する</title>
      <link>https://satoshun.github.io/2018/07/constraintlayout-negative_margin/</link>
      <pubDate>Wed, 25 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2018/07/constraintlayout-negative_margin/</guid>
      <description>ConstraintLayoutはネガティブマージンに対応していないため、少しテクニックを使う必要があります。 この記事ではSpaceを使ったネガティブマージンの実現について説明します。
例 ネガティブマージンと同等の大きさを持ったSpaceを定義して、そこにConstraintを設定するだけです。
&amp;lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34; xmlns:app=&amp;#34;http://schemas.android.com/apk/res-auto&amp;#34; xmlns:tools=&amp;#34;http://schemas.android.com/tools&amp;#34; android:layout_width=&amp;#34;match_parent&amp;#34; android:layout_height=&amp;#34;match_parent&amp;#34; android:clipToPadding=&amp;#34;false&amp;#34; android:padding=&amp;#34;80dp&amp;#34;&amp;gt; &amp;lt;Space android:id=&amp;#34;@+id/negative&amp;#34; android:layout_width=&amp;#34;15dp&amp;#34; android:layout_height=&amp;#34;15dp&amp;#34; app:layout_constraintStart_toStartOf=&amp;#34;parent&amp;#34; app:layout_constraintTop_toTopOf=&amp;#34;parent&amp;#34; /&amp;gt; &amp;lt;ImageView android:id=&amp;#34;@+id/icon&amp;#34; android:layout_width=&amp;#34;30dp&amp;#34; android:layout_height=&amp;#34;30dp&amp;#34; android:contentDescription=&amp;#34;icon&amp;#34; app:layout_constraintBottom_toBottomOf=&amp;#34;@id/negative&amp;#34; app:layout_constraintEnd_toEndOf=&amp;#34;@id/negative&amp;#34; tools:src=&amp;#34;@tools:sample/avatars&amp;#34; /&amp;gt; &amp;lt;/androidx.constraintlayout.widget.ConstraintLayout&amp;gt; 簡単に説明すると、Spaceに15pxを指定して、bottom, endに対してconstraintを指定することで、ネガティブマージンを達成しています。 上記の例だと、
android:layout_marginStart=&amp;quot;-15px&amp;quot; android:layout_marginTop=&amp;quot;-15px&amp;quot; と同等の振る舞いをしています。
まとめ ConstraintLayoutではネイティブでネガティブマージンに対応していないため、Spaceを使った、ややテクニカルな方法で実現するのが良いと思われます。</description>
    </item>
    
  </channel>
</rss>
