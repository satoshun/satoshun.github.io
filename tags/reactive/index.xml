<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>reactive on stsnブログ</title>
    <link>https://satoshun.github.io/tags/reactive/</link>
    <description>Recent content in reactive on stsnブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Fri, 22 May 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://satoshun.github.io/tags/reactive/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ReactiveX: Hot, Coldの違い</title>
      <link>https://satoshun.github.io/2015/05/hot_cold/</link>
      <pubDate>Fri, 22 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2015/05/hot_cold/</guid>
      <description>ReactiveXにおける, Cold/Hot Observableの違いを説明します.
(本文中の「subscribeする」と, 「Observerを登録する」は同義です.)
Cold Observable Cold ObservableはSubscribeされると動作を開始します.
var source = Rx.Observable.range(1, 10);  // 何か処理 // ...  source.subscribe(function(x) {  console.log(x); // 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }); 例えば, 上のコードだと, sourceを定義した時点ではストリームが生成されておらず, source.subscribeされた時に, 初めてストリームが生成されます. 遅延評価(lazy evaluation)のような振る舞いをします.
次に, 1つのCold Observableに対して複数subscribeしたとします.
var source = Rx.Observable.range(1, 10);  // 何か処理 // ...  source.subscribe(function(x) {  console.log(x); // 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }); source.</description>
    </item>
    
  </channel>
</rss>
