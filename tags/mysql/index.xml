<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mysql on stsnブログ</title>
    <link>https://satoshun.github.io/tags/mysql/</link>
    <description>Recent content in Mysql on stsnブログ</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Thu, 09 Apr 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://satoshun.github.io/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>データベース: 履歴データについて</title>
      <link>https://satoshun.github.io/2015/04/history_data/</link>
      <pubDate>Thu, 09 Apr 2015 00:00:00 +0000</pubDate>
      <guid>https://satoshun.github.io/2015/04/history_data/</guid>
      <description>&lt;p&gt;RDBで履歴データを保持する方法についてまとめました. そもそも履歴データは, リレーショナルモデルとは相性が悪いので, これが正解!みたいなものはないです.&lt;/p&gt;&#xA;&lt;h2 id=&#34;履歴データとは&#34;&gt;履歴データとは?&lt;/h2&gt;&#xA;&lt;p&gt;スーパーの商品の値段のように, 時間の経過とともに属性の値が変化していくデータがあります. そのようなデータを履歴データと呼びます.&lt;/p&gt;&#xA;&lt;h2 id=&#34;フラグを付ける&#34;&gt;フラグを付ける&lt;/h2&gt;&#xA;&lt;p&gt;最初に一番オーソドックス?な, フラグをつけて管理する方法です.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;products&lt;/code&gt;テーブル&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;id&lt;/th&gt;&#xA;          &lt;th&gt;name&lt;/th&gt;&#xA;          &lt;th&gt;price&lt;/th&gt;&#xA;          &lt;th&gt;active&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;卵&lt;/td&gt;&#xA;          &lt;td&gt;200&lt;/td&gt;&#xA;          &lt;td&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2&lt;/td&gt;&#xA;          &lt;td&gt;卵&lt;/td&gt;&#xA;          &lt;td&gt;250&lt;/td&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;3&lt;/td&gt;&#xA;          &lt;td&gt;肉&lt;/td&gt;&#xA;          &lt;td&gt;100&lt;/td&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;activeなデータを取得するときは, &lt;code&gt;SELECT * FROM products WHERE active = 1;&lt;/code&gt; とします.&lt;/p&gt;&#xA;&lt;p&gt;この方法の利点はパッと見に分かりやすいことだと思います. しかし, この方法はバッドノウハウだとされています. 理由を以下にあげます.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;activeフラグはカーディナリティが低く効率が悪い&lt;/li&gt;&#xA;&lt;li&gt;テーブルサイズが時間ともに肥大化し, 検索効率が下がる恐れがある&lt;/li&gt;&#xA;&lt;li&gt;activeの更新は, アプリ側 もしくは, トリガーで制御しなければいけない&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;単純で分かりやすいですが, あまり使わないほうが良い方法のようです.&lt;/p&gt;&#xA;&lt;h2 id=&#34;範囲を指定する&#34;&gt;範囲を指定する&lt;/h2&gt;&#xA;&lt;p&gt;次は範囲を指定する方法です.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;products&lt;/code&gt;テーブル&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;id&lt;/th&gt;&#xA;          &lt;th&gt;name&lt;/th&gt;&#xA;          &lt;th&gt;price&lt;/th&gt;&#xA;          &lt;th&gt;start_date&lt;/th&gt;&#xA;          &lt;th&gt;end_date&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;卵&lt;/td&gt;&#xA;          &lt;td&gt;200&lt;/td&gt;&#xA;          &lt;td&gt;2015-03-22&lt;/td&gt;&#xA;          &lt;td&gt;2015-04-06&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2&lt;/td&gt;&#xA;          &lt;td&gt;卵&lt;/td&gt;&#xA;          &lt;td&gt;250&lt;/td&gt;&#xA;          &lt;td&gt;2015-04-07&lt;/td&gt;&#xA;          &lt;td&gt;9999-01-01&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;3&lt;/td&gt;&#xA;          &lt;td&gt;肉&lt;/td&gt;&#xA;          &lt;td&gt;100&lt;/td&gt;&#xA;          &lt;td&gt;2015-02-01&lt;/td&gt;&#xA;          &lt;td&gt;9999-01-01&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;activeなデータを取得するときは, &lt;code&gt;SELECT * FROM products WHERE NOW() BETWEEN start_date AND end_date;&lt;/code&gt; とします.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[ERROR] InnoDB: Cannot allocate memory for the buffer pool の対処法</title>
      <link>https://satoshun.github.io/2015/04/mysql_memory_error/</link>
      <pubDate>Tue, 07 Apr 2015 00:00:00 +0000</pubDate>
      <guid>https://satoshun.github.io/2015/04/mysql_memory_error/</guid>
      <description>&lt;p&gt;上記のエラーが出たらメモリ不足なので, スワップ領域を作るのが良いと思います.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;## swap領域の確認&#xA;$ swapon -s&#xA;Filename                Type        Size    Used    Priority&#xA;&#xA;## swap領域の確保&#xA;$ sudo dd if=/dev/zero of=/swapfile bs=1024 count=1024k&#xA;&#xA;## swap領域の作成&#xA;$ sudo mkswap /swapfile&#xA;&#xA;## swap領域の割り当て&#xA;$ sudo swapon /swapfile&#xA;&#xA;$ swapon -s&#xA;Filename                Type        Size    Used    Priority&#xA;/swapfile                               file        1048572 4320    -1&#xA;&#xA;$ free&#xA;             total       used       free     shared    buffers     cached&#xA;Mem:        760132     689248      70884       4672       7740      48944&#xA;-/+ buffers/cache:     632564     127568&#xA;Swap:      1048572      88556     960016&#xA;&#xA;## 再起動時にもswapを割り当てるように設定&#xA;$ sudo vi /etc/fstab&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これでおｋ.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
