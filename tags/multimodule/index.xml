<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>multimodule on stsnブログ</title>
    <link>https://satoshun.github.io/tags/multimodule/</link>
    <description>Recent content in multimodule on stsnブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Sun, 22 May 2022 12:53:30 +0000</lastBuildDate><atom:link href="https://satoshun.github.io/tags/multimodule/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>マルチモジュール環境の開発改善について雑談</title>
      <link>https://satoshun.github.io/2022/05/android-improve-development-multimodule/</link>
      <pubDate>Sun, 22 May 2022 12:53:30 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2022/05/android-improve-development-multimodule/</guid>
      <description>この記事では、昨今のマルチモジュール環境の開発改善について雑談をします。この記事は文章がまとまってないです。（いつかもう少しいい感じにまとめます）
大きいプロジェクトの場合、マルチモジュールプロジェクトに移行するケースは多いと思います。歴史とともに機能が増えていき、どうしてもビルド時間の増加、IDEのパフォーマンス低下などが発生します。
どう頑張っても、app全体のビルド時間の短縮には限界があります。そこで、機能単位でもアプリを作れるようにすることで、改善を試みます。 機能単位と言っても、すべての機能ごとにアプリを作れるようにする必要はなくて、開発が活発な機能に絞って作れるようにしておくと良いです。新機能であったり、コア機能などが該当します。
ここで、どのように機能単位のアプリを作るのかって話なんですが、Dagger Hiltを使っているなら、DaggerのDIの解決さえ出来れば、機能アプリを作ることが出来ます。DIをどのように解決するかって話なんですが、既存のapplicationモジュールから、Dagger DI部分を切り出したapplication-diモジュールを作って、それを機能アプリから参照すれば、ほぼ解決出来ると思います。どうしても解決できないクラスは、MockHogeHogeみたいにして、機能アプリ内のモジュールで解決してあげれば良いです。
機能モジュールを作ることで、ビルド時間は短縮出来ますが、IDEのインデックス時間などは改善されません。そこでさらに、focusを組み合わせることで、IDEのパフォーマンス改善が期待できます。 focusの使い方は、下記のリンクを参考にしてください。
https://dropbox.tech/mobile/introducing-focus-a-new-open-source-gradle-plugin https://github.com/dropbox/focus 例えば、機能が20個のプロジェクトの場合に、focusを使うことで、19個の機能モジュールの読み込みを制限することが出来ます。実際にはデータモジュール等、機能モジュール以外のモジュールもあるので、そう単純な話ではないんですが、それでもかなりのモジュールの読み込みを削減が期待できます。
大規模なプロジェクトの場合、機能ごとにアプリを作れるようにする + focusを使うことで開発環境の改善が期待できるので、検討して見るのも良いと思います。</description>
    </item>
    
    <item>
      <title>マルチモジュール環境での、dummyモジュール導入によるビルドの高速化</title>
      <link>https://satoshun.github.io/2020/12/multimodule_dummy_module/</link>
      <pubDate>Sat, 12 Dec 2020 04:18:00 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2020/12/multimodule_dummy_module/</guid>
      <description>最初にまとめ 各モジュール間の結合度(publicなクラス、インターフェース)を低く保ち、settings.gradleを工夫することで、最小限のコードでdummyモジュールを導入できる。dummyモジュールのコード量は限りなく少ないので、ビルド時間の短縮につながる。
サンプルは https://github.com/satoshun-android-example/GradleDummyProject にあります。少し本記事とモジュール名などが異なります。
本題 プロジェクトの規模が大きくなると、ビルド時間は増加する傾向にあります。マルチモジュールによるアプローチは、差分ビルドを効率良く動作させることが出来ます。本記事では、マルチモジュールプロジェクトに、dummyモジュールを差し込むことでビルド時間の改善をする方法を紹介します。
また、この記事では触れませんが、機能（画面）ごとにappモジュールを作るアプローチも良いと思います。
dummyモジュールとは 例えば、注文を行うorderモジュールがあるとします。今回の開発では、その注文画面は使う必要がないとします。使う必要がないので、orderモジュールは一時的に削除しても良いことになります。しかし、単純にモジュールを削除してしまうと、何かしらの参照エラーになってしまうので、order-dummyモジュールを作り、参照エラーになるクラスを実装します。具体的には、orderモジュールで定義されているpublicなクラス、インターフェースです。
今回、orderモジュールには唯一Orderクラスのみがpublicとして定義されているとすると、次のように書きます。
class Order { fun canOrder(): Boolean { ... } fun order() { ... } } class Order { fun canOrder(): Boolean { TODO(&amp;#34;dummy&amp;#34;) } fun order() { TODO(&amp;#34;dummy&amp;#34;) } } 必要に応じて、orderモジュール、order-dummyモジュールを切り替えることでビルド時間を短縮することが出来ます。
どのようにモジュールを切り替えるか? settings.gradleとGradleプロパティを用います。
まず、settings.gradleは次のようになります。
if (properties[&amp;#34;dummyorder&amp;#34;]) { include &amp;#34;order&amp;#34; project(&amp;#39;:order&amp;#39;).projectDir = file(&amp;#39;dummyorder&amp;#39;) } else { include &amp;#39;:order&amp;#39; } dummyorderプロパティに、何かしらの値がセットされていたら、dummyorderモジュールを使う設定になります。
dummyorderプロパティの設定はコマンドラインからは -P、Android StudioからはCommand-Line Optionsから指定します。
これで完了です。普段使わないモジュールをdummyに差し替えるテクニックでした。各モジュール間の結合度が低いなら、コード量少なくお手軽に導入することが出来ます。
雑談 まだ、この機能をプロダクションに導入していないので、もし導入したら、どれくらいの効果があったかを追記します。効果がない可能性も微レ存です。</description>
    </item>
    
    <item>
      <title>Android マルチモジュール: Gradle周りで便利だと思う設定</title>
      <link>https://satoshun.github.io/2019/11/multi-module-gradle-properties/</link>
      <pubDate>Mon, 11 Nov 2019 00:50:18 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/11/multi-module-gradle-properties/</guid>
      <description>マルチモジュールなアプリを作ることをテーマにブログを書いていこうの、2本目です。
1本目はこちらになります。
Android マルチモジュール: ライブラリのバージョン管理について 今回は、マルチモジュール環境における、Gradle周りの便利であろう設定について、次の4つを紹介します。
モジュール内のリソース名にルールを持たせる BuildConfigを作らない モジュール内でProGuard/R8の設定をする Rファイルを小さく保つ モジュール内のリソース名にルールを持たせる resourcePrefixは、リソース名のプレフィックスにルールを設けるプロパティです。
例えば、次のように書くと、このモジュール内のリソース（レイアウト、Drawable、Stringなど）はhome_から始まる必要があります。
// build.gradle android { ... resourcePrefix &amp;#39;home_&amp;#39; } // strings.xml &amp;lt;resource&amp;gt; // home_から始まる必要がある &amp;lt;string name=&amp;#34;home_app_name&amp;#34;&amp;gt;適当な文字列&amp;lt;/string&amp;gt; &amp;lt;/resource&amp;gt; これを定義することで、名前のコンフリクトを防ぐことが出来ます。また、名前からリソースがどのモジュールで定義されているかを推測すること出来ます。
BuildConfigを作らない モジュールのBuildConfigの生成を無効にすることが出来ます。例えば、uber/AudoDisposeでは、次のように設定しています。
// build.gradle project.android { libraryVariants.all { it.generateBuildConfigProvider.configure { it.enabled = false } } } モジュールで、BuildConfigが必要になることは稀なので、基本つけておくと良いと思います。
モジュール内でProGuard/R8の設定をする consumerProguardFilesを使うことで、モジュールのProguard/R8の設定を定義することが出来ます。
例えば、次のように使います。
// build.gradle android { defaultConfig { consumerProguardFiles &amp;#39;consumer-rules.pro&amp;#39; } } // consumer-rules.pro -keep class * implements com.google.gson.TypeAdapterFactory このように書くことで、ProGuardを有効にしてビルドした時に、consumer-rules.proの設定も考慮して、コード最適化を行ってくれます。
Rファイルを小さく保つ R.javaは依存関係にあるモジュールのR.javaを、マージしていくような動作をするため、マルチモジュール環境だと各モジュール内で生成されるR.javaのサイズが馬鹿にならないことがあります。そこで、gradle.propertiesに次の設定をすることで、モジュールのR.javaのサイズを抑えることが出来ます。</description>
    </item>
    
    <item>
      <title>Android マルチモジュール: ライブラリのバージョン管理について</title>
      <link>https://satoshun.github.io/2019/09/multi-module-dependency-management/</link>
      <pubDate>Mon, 23 Sep 2019 12:07:59 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/09/multi-module-dependency-management/</guid>
      <description>マルチモジュールなアプリを作ることをテーマにいくつかの記事を書いていきたいと思っています。
まだ正確には決まっていないのですが、以下のような内容をまとめていこうと思っております。
ライブラリのバージョン管理について マルチモジュール構築に役立つGradleの設定 モノリシックなアプリからマルチモジュールへ 外部ライブラリとして切り出すタイミングを考える DFM、モジュール間の遷移方法 モジュールの階層について ビルドの高速化について 今回は、ライブラリのバージョン管理について書いてきます。
ライブラリのバージョン管理？ Android開発では、Gradleで外部ライブラリの依存を定義するのが一般的です。マルチモジュールプロジェクトの場合、外部ライブラリのバージョンを合わせるため、変数のような形で定義しておくと便利です。
変数の定義方法には、直接記述する方法を除くと、大きく2つの方法があります。
1. Gradleのextraプロパティを使う Androidの公式ドキュメント: Configure project-wide propertiesで紹介されている方法です。 extにバージョンを定義します。
例えば、OkHttpでは、次のように定義しています。
buildscript { ext.versions = [ &amp;#39;animalSniffer&amp;#39;: &amp;#39;1.17&amp;#39;, &amp;#39;assertj&amp;#39;: &amp;#39;3.11.0&amp;#39;, &amp;#39;bouncycastle&amp;#39;: &amp;#39;1.62&amp;#39;, &amp;#39;brotli&amp;#39;: &amp;#39;0.1.2&amp;#39;, ... ext.deps = [ &amp;#39;picocli&amp;#39;: &amp;#34;info.picocli:picocli:${versions.picocli}&amp;#34;, &amp;#39;android&amp;#39;: &amp;#34;org.robolectric:android-all:9-robolectric-4913185-2&amp;#34;, &amp;#39;animalSniffer&amp;#39;: &amp;#34;org.codehaus.mojo:animal-sniffer-annotations:${versions.animalSniffer}&amp;#34;, &amp;#39;assertj&amp;#39;: &amp;#34;org.assertj:assertj-core:${versions.assertj}&amp;#34;, &amp;#39;bouncycastle&amp;#39;: &amp;#34;org.bouncycastle:bcprov-jdk15on:${versions.bouncycastle}&amp;#34;, &amp;#39;brotli&amp;#39;: &amp;#34;org.brotli:dec:${versions.brotli}&amp;#34;, ... extプロパティにライブラリのバージョンをセットします。
そして、次のように使います。
dependencies { api deps.okio api deps.kotlinStdlib compileOnly deps.android compileOnly deps.conscrypt ... メリット、デメリットをまとめると次になります。
メリット Androidの公式ドキュメントで紹介されている方法 ノウハウが多い Android StudioのProject Structureが使える (Project Structureについては最後に紹介します) デメリット IDEによるコード補完が効かない 2.</description>
    </item>
    
    <item>
      <title>マルチモジュールの遷移について考える Part2</title>
      <link>https://satoshun.github.io/2019/02/multi-module_transition_part2/</link>
      <pubDate>Fri, 15 Feb 2019 00:14:56 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/02/multi-module_transition_part2/</guid>
      <description>マルチモジュール遷移方法Part2です。Part1はここになります😌
Part2では、Navigation Componentを使うパターンを考えてみます。今回はDynamic Feature(DFM)には触れません。いわゆる一般的なライブラリモジュールでの遷移になります。
また、今回の検証に用いたコードはsatoshun/MultiModuleNavigationComponentExampleにあります。
モジュール構成について 細かい実装に入る前に、全体的なモジュール構成を説明します。今回はappモジュールがトップにあり、2つのfeatureモジュールがあるとします。
各featureモジュールでは遷移用インターフェースを持っており、それを用いて他のfeature画面へ遷移をします。遷移用インターフェースの実装はapp内のrouterモジュールで行います。
このモジュール構成のポイントは、各featureモジュール内で自身が使う遷移インターフェースを定義し、appがそのインターフェースの実装を行う点です。このようにすることで、feature間で直接の依存を持つことを防ぐことができます。これは循環依存を避けるためです。
では、実装に入っていきます。今回はDagger2を使って実装をします。
featureモジュール側の遷移用インターフェースの定義 前述の図の通り、各featureモジュール内で遷移用のインターフェースを定義します。ここでは、featureモジュール内で使用するインターフェースを定義します。
main画面からsub1画面に移動したいとします。次のようなインターフェース定義になります。
interface MainModuleRouter { // sub1画面へ移動する fun routeToSub1() } Mainモジュール用のインターフェースなので、MainModuleRouterという名前にし、sub1画面へ遷移するためのメソッドを定義しています。
そしてこのインターフェースを、MainFragmentで使います。
class MainFragment : Fragment() { @Inject lateinit var moduleRouter: MainModuleRouter ... override fun onViewCreated(view: View, savedInstanceState: Bundle?) { super.onViewCreated(view, savedInstanceState) view.findViewById&amp;lt;View&amp;gt;(R.id.route).setOnClickListener { moduleRouter.routeToSub1() } } } これでfeatureモジュールでの遷移用インターフェースの定義は完了です。
次にこのインターフェースの実装をします。
routerモジュール側の遷移用インターフェースの実装 今回は、遷移用インタフェースの実装をrouterモジュールで行います。まずは、Navigation Componentを用いて、Graphを作ります。
&amp;lt;navigation xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34; xmlns:app=&amp;#34;http://schemas.android.com/apk/res-auto&amp;#34; android:id=&amp;#34;@+id/nav_graph&amp;#34; app:startDestination=&amp;#34;@id/nav_main_frag&amp;#34;&amp;gt; &amp;lt;fragment android:id=&amp;#34;@+id/nav_main_frag&amp;#34; android:name=&amp;#34;com.github.satoshun.example.feature.main.MainFragment&amp;#34;&amp;gt; &amp;lt;action android:id=&amp;#34;@+id/main_to_sub1&amp;#34; app:destination=&amp;#34;@id/nav_sub1_frag&amp;#34; /&amp;gt; &amp;lt;/fragment&amp;gt; ... &amp;lt;/navigation&amp;gt; そして、これを用いて遷移用インターフェースを実装します。</description>
    </item>
    
    <item>
      <title>でかいappモジュールがあるときに、中間モジュールを入れることで差分ビルドを上手く効かせる</title>
      <link>https://satoshun.github.io/2019/02/multi-module-speedup/</link>
      <pubDate>Mon, 11 Feb 2019 01:40:29 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/02/multi-module-speedup/</guid>
      <description>マルチモジュール構成のメリットに差分ビルドの効率化というものがあります。しかし、モノシリックなappモジュールから、マルチモジュール構成に変更していく過程ではappモジュールがでかいままなので、差分ビルドによる恩恵が受けにくいという問題があります。（最終段階まで進めばappモジュールは十分に小さくなるので、差分ビルドの恩恵を受けられます）
例えば、以下のモジュール構成を考えます。
頑張って2つのモジュールを切り出しました。ただし、これではどこのモジュールを変更してもかなりのビルド時間がかかります。なぜなら、Gradleでは依存関係にあるモジュールが変更されたときに、自分自身も（ある程度?）再ビルドされるためです。なので、上記のモジュール構成だと、どこのモジュールを修正しても、常に大きいappモジュールが再ビルドされてしまうため、ビルド時間がかかってしまいます。
そこで、間に中間モジュールを挟むテクニックを紹介します。このテクニックを使うと以下のようになります。
途中に適当なモジュールを挟むことで、サブ1、サブ2が変更されたときにappモジュールの再ビルドを防ぐことができます。
ただし、いくつか条件があります。
1. 中間モジュールで公開可能なものに限る 例えばサブ1でSubActivityを公開していて、これを直接appから参照している場合は駄目です。 これをSubActivityとしてではなく、Activityとして参照できるなら大丈夫です。サブ1モジュールで定義されているクラスがappモジュールから見れないための制約です。
中間モジュールのコードイメージとしては以下のようになります。
fun createUserFragment(userName: String, age: Int): Fragment { return UserFragment.createFragment(userName, age) } fun createUserIntent(context: Context): Intent { return Intent(context, UserActivity::class.java) } UserActivity、UserFragmentが公開されていないことが分かります。Androidのいわゆるfeatureモジュールでは、Activity、Fragmentを公開する場合が多いと思うので、その場合には有効に使うことができます。
2. implementationで依存を定義する apiを使うと、依存が推移するため再ビルドが行われてしまうためです。implementationで依存を記述する必要があります。
3. Dagger2使ってると多分無理 Dagger2では、解決する依存をAppComponentで知っている必要があります。上記の構成だと、appでAppComponentを持つことになるので、appからsub1、sub2が見えていないと最終的にDagger2で解決できません。なので、中間モジュールで、appからsubの依存が見えなくなるこのパターンは使えません。
詳しくはDagger/#970にあります。
まとめ やりすぎ感はある ただでさえ複雑な、モジュール構成がさらに煩雑になりそう。ただし、最終的には消えるので、差分ビルドの恩恵を受けるためのステップだとすれば許せるかも? Dagger2を使っていると推移的依存が必要になり、使えない、もしくは工夫が必要になる サンプルはsatoshun/ApplicationModulesSpeedUpExampleにあります サブモジュールを変更したときのビルドは爆速でした😊 Daggerの部分のいい解決方法を知っている人がいたら、教えて頂けると幸いです😊😊😊</description>
    </item>
    
    <item>
      <title>Dynamic Feature ModuleでDagger Androidを使う</title>
      <link>https://satoshun.github.io/2019/01/dynamic-feature-and-dagger-android/</link>
      <pubDate>Wed, 16 Jan 2019 12:10:36 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/01/dynamic-feature-and-dagger-android/</guid>
      <description>Dependency injection in a multi module projectを見て、Dynamic FeatureをDagger Androidで実現するにはどうするかを考えてみました。
結論からいうと、いくつかのbaseクラスを定義することで対応できそうです。
また、この記事ではDynamic Feature Module、Dagger Androidをある程度知っている前提で進めていきます。
検証に用いたコードはsatoshun-android-example/DynamicFeatureDaggerExampleにあります😊
前提知識 通常のDagger AndroidはApplicationクラスでComponentを保持して、そこからSubcomponentを派生させる形になります。 ここでのポイントは、Applficationでトップに位置するComponentを保持/作成するという点です。これはappモジュールが全てのFeatureモジュールを知っていることを意味します。
この前提をもとに、Dynamic Featureを考えます。Dynamic FeatureではApplicationでトップに位置するComponentを保持/作成することが出来ません。なぜなら、appモジュールは各Featureモジュールのことを知れないためです。Dynamic Moduleでは通常のモジュール構成と違い、appとFeature Module間の依存関係が逆転します。結果、Applicationでトップに位置するComponentを保持/作成することが出来ません。
そこでDynamic Featureでは、appモジュールでトップに位置するComponentを保持するのはやめて、各Feature Module内でそれぞれのComponentを保持するのが良いことが分かります。
ここまでが前提知識で、次にDynamic Feature + Dagger Androidの実装について説明します。
実装 Feature Subモジュールがあり、このSubモジュールのエントリポイント（トップに位置するクラス）としてSubActivityが定義されているとします。 実装の方針としては、このSubActivityをDaggerApplicationのように振る舞わさせることを目指します。なぜなら、このFeatureモジュールのトップに位置するクラスがSubActivityなので、これをDaggerApplicationのように扱うことができれば、Dagger Androidの世界に上手く落とし込むことが出来ると考えたからです。
では、実装を始めます。
最初に、SubActivityをDaggerApplicationのように振る舞わさせるためにModuleRootActivityクラスを定義します。 それに合わせて、いくつかの付随したクラスも定義しておきます。これがbaseクラス群になります。
abstract class ModuleRootActivity : AppCompatActivity(), HasModuleInjector { @Inject lateinit var fragmentInjector: DispatchingAndroidInjector&amp;lt;Fragment&amp;gt; private lateinit var injector: ModuleActivityInjector override fun onCreate(savedInstanceState: Bundle?) { injector = moduleComponent.moduleInjector injector.activity.inject(this) super.onCreate(savedInstanceState) } protected abstract val moduleComponent: ModuleActivityComponent override fun supportFragmentInjector(): AndroidInjector&amp;lt;Fragment&amp;gt; = fragmentInjector } class ModuleActivityInjector @Inject constructor( internal val activity: DispatchingAndroidInjector&amp;lt;Activity&amp;gt; ) interface ModuleActivityComponent { val moduleInjector: ModuleActivityInjector } interface HasModuleInjector : HasSupportFragmentInjector abstract class ModuleChildFragment : Fragment() { override fun onAttach(context: Context) { AndroidSupportInjection.</description>
    </item>
    
    <item>
      <title>マルチモジュールの遷移について考える Part1</title>
      <link>https://satoshun.github.io/2018/12/multi-module_transition_part1/</link>
      <pubDate>Mon, 31 Dec 2018 06:19:39 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2018/12/multi-module_transition_part1/</guid>
      <description>Androidのトレンドの1つにマルチモジュール構成があります。 マルチモジュールによるメリットとして、
ビルド時間の短縮 依存関係を各モジュールに閉じ込めることでコードをクリーンに保つことが期待できる などがあります。大規模なプロジェクトでは上記のメリットは大きいため、マルチモジュールに移行していくことになると思います。
この記事は、マルチモジュールにした際のActivity間の遷移について考えたいと思います。目指すゴールとしては、
型安全にしたい、もしくはコンパイル時にチェックする機構が欲しい コード量を減らしたい Part1では、遷移専用のモジュールを作る方法を考えてみます。
サンプルコード: satoshun-android-example/MultiActivityRouterExample
遷移専用のモジュールを作る まず依存関係の構築の原則に、Circular Dependency、循環依存を作り出してはいけないというものがあります。
例えば、メイン画面とサブ画面の2画面があり、それらの画面は相互に行き来するとします。それらをメイン画面モジュール、サブ画面モジュールとして切り出すと次のようになります。
メインではサブ画面が必要なのでサブモジュールに依存する サブではメイン画面が必要なのでメインモジュールに依存する これでは循環参照になり、依存関係が壊れてしまうので駄目です。そこでDIP、依存関係逆転の原則を用います。 直接Activityを参照しているのが問題なので、各画面に遷移できる遷移用のインターフェースを定義することで解決を目指します。
そこで、
メイン画面に遷移するメインルーターモジュール サブ画面に遷移するサブルーターモジュール の2つのモジュールを作ります。
メインルーターモジュールでは次の遷移専用インターフェースを定義します。
interface MainRouter { fun routeToMain(context: Context): Intent } そして、メインモジュールで実装します。また、今回はDaggerを使って依存を解決します。
internal class MainRouterImpl @Inject constructor() : MainRouter { override fun routeToMain(context: Context): Intent { return Intent(context, MainActivity::class.java) } } --- @Module internal interface MainActivityModule { @Binds fun bindMainRouter(impl: MainRouterImpl): MainRouter } これで、使う側であるサブ画面は、メインモジュールに依存するのではなく、メインルーターモジュールに依存し遷移することが出来ます。
class SubActivity : AppCompatActivity() { @Inject lateinit var router: MainRouter .</description>
    </item>
    
  </channel>
</rss>
