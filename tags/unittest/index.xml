<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>unittest on stsnブログ</title>
    <link>https://satoshun.github.io/tags/unittest/</link>
    <description>Recent content in unittest on stsnブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Sun, 14 Oct 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://satoshun.github.io/tags/unittest/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>UnitテストでViewModelのonClearedをテストする</title>
      <link>https://satoshun.github.io/2018/10/unittest-viewodel_oncleared/</link>
      <pubDate>Sun, 14 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2018/10/unittest-viewodel_oncleared/</guid>
      <description>ふとAACのViewModelのonClearedメソッドをテストしたくなったので、 3つのやりかたを紹介します。
環境は
&amp;#34;junit:junit:4.12&amp;#34; &amp;#34;androidx.test:rules:1.1.1&amp;#34; &amp;#34;androidx.test:runner:1.1.1&amp;#34; &amp;#34;androidx.test.ext:junit:1.1.0&amp;#34; &amp;#34;com.nhaarman:mockito-kotlin-kt1.1:1.5.0&amp;#34; &amp;#34;org.robolectric:robolectric:4.1&amp;#34; になります。
また、サンプルコードは satoshun-android-example/Testsにあるので、参考してください😊
1. ViewModelStoreを使う ViewModelProviders.of(activity).get(class)からViewModelを取得したときに、取得したViewModelはViewModelStoreにキャッシュされます。このViewModelStoreはFragmentActivityから取得できるので、次のように書くことでViewModelのonClearedをテストすることが出来ます。
@RunWith(AndroidJUnit4::class) class BaseViewModelTest {  @get:Rule val activityRule = ActivityTestRule(FragmentActivity::class.java)   @Test  fun `dispose a coroutine when finished lifecycle of ViewModel`() {  activityRule.activity.viewModelStore.clear() // ViewModelが開放される  } } このテストはコード的には簡単ですが、ViewModelStoreがViewModelを管理していることを知っている、内部実装の詳細まで知っているため、テストとしてふさわしくない可能性があります。
なので、素直にonDestroyをコールするテストも書いてみます。
2. Instrumentation.callActivityOnDestroyを使う Instrumentationクラスを使うことでActivityのライフサイクルをコントロールすることが出来ます。 InstrumentationはInstrumentationRegistryクラスから取得することができ、次のように書くことで、onDestroyをコールすることができます。
@Test fun `dispose a coroutine when finished lifecycle of ViewModel 2`() {  // onDestroyがコールされViewModelが開放される  InstrumentationRegistry.getInstrumentation().callActivityOnDestroy(activityRule.activity) } ActivityのonDestroyがコールされ、ViewModelのonClearedもコールされます！</description>
    </item>
    
  </channel>
</rss>
