<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kmm on stsnブログ</title>
    <link>https://satoshun.github.io/tags/kmm/</link>
    <description>Recent content in kmm on stsnブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Sun, 05 Sep 2021 03:00:44 +0000</lastBuildDate><atom:link href="https://satoshun.github.io/tags/kmm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>KMMでアクセス修飾子をつけるとobjcヘッダーファイルが小さくなって嬉しい話</title>
      <link>https://satoshun.github.io/2021/09/kmm-export-objc-header/</link>
      <pubDate>Sun, 05 Sep 2021 03:00:44 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2021/09/kmm-export-objc-header/</guid>
      <description>KMMで作ったライブラリはobjcヘッダーを生成し、それを介してSwift(Xcode)側から読み込むことが出来ます。
Kotlin側で、internalとか、private等のアクセス修飾子をつけることで、objcヘッダーを小さくすることが出来ます。
つけない場合 ktorのHttpClientを例にして説明します。
コンストラクタにアクセス修飾子をつけない、次のようなクラスがあるとします。
import io.ktor.client.HttpClient  class Test1(  private val httpClient: HttpClient ) これは、次のようなヘッダーファイルを生成します。(一部省略)
...  public class Test1 : KotlinBase {  public init(httpClient: Ktor_client_coreHttpClient) }   public protocol Ktor_ioCloseable {    func close() }  public class Ktor_client_coreHttpClient : KotlinBase, Kotlinx_coroutines_coreCoroutineScope, Ktor_ioCloseable {  ... }  ... HttpClientに関連したクラスをobjcヘッダーに公開しています。 ktorは大きいライブラリなので、objcヘッダーがとても大きくなります。
最終的に、2143行のobjcヘッダーになっていました。
つける場合 次に、アクセス修飾子をつけてみます。
import io.ktor.client.HttpClient  class Test2 internal constructor(  private val httpClient: HttpClient ) これは次のようなヘッダーファイルを生成します。</description>
    </item>
    
    <item>
      <title>KMM: CocoaPodsのPrivate Spec Repoを使う</title>
      <link>https://satoshun.github.io/2021/02/kmm-cocoapods-external-source/</link>
      <pubDate>Sat, 20 Feb 2021 09:06:26 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2021/02/kmm-cocoapods-external-source/</guid>
      <description>(この記事は、前提知識として、KMMにおけるCocoapodsの知識が必要です。)
 KMMでは、CocoaPodsプラグインを使うと、podspecファイルを生成してくれます。このpodfileはローカルでは動かすことが出来るんですが、Private Spec Repoにアップロードするには、これを編集する必要があります。
以下、編集したところを載せます。
Pod::Spec.new do |spec|  ...  spec.source = { :git =&amp;gt; &amp;#34;https://github.com/satoshun-android-example/KMMExternalSourceCocoapods.git&amp;#34;, :tag =&amp;gt; &amp;#34;0.0.2&amp;#34; }  ...  spec.preserve_paths = &amp;#34;**/*.*&amp;#34;  ...  spec.script_phases = [  {  :name =&amp;gt; &amp;#39;Build cocoapodsshared&amp;#39;,  :execution_position =&amp;gt; :before_compile,  :shell_path =&amp;gt; &amp;#39;/bin/sh&amp;#39;,  :script =&amp;gt; &amp;lt;&amp;lt;-SCRIPT  set -ev  REPO_ROOT=&amp;#34;$PODS_TARGET_SRCROOT&amp;#34;  &amp;#34;$REPO_ROOT/gradlew&amp;#34; -p &amp;#34;$REPO_ROOT&amp;#34; :cocoapodsshared:syncFramework \  -Pkotlin.native.cocoapods.target=$KOTLIN_TARGET \  -Pkotlin.native.cocoapods.configuration=$CONFIGURATION \  -Pkotlin.</description>
    </item>
    
  </channel>
</rss>
