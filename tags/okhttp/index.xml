<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Okhttp on stsnブログ</title>
    <link>https://satoshun.github.io/tags/okhttp/</link>
    <description>Recent content in Okhttp on stsnブログ</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Sun, 24 Mar 2019 02:36:27 +0000</lastBuildDate>
    <atom:link href="https://satoshun.github.io/tags/okhttp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OkHttp: Java to KotlinのPRを見て勉強する</title>
      <link>https://satoshun.github.io/2019/03/okhttp-convert-to-kotlin/</link>
      <pubDate>Sun, 24 Mar 2019 02:36:27 +0000</pubDate>
      <guid>https://satoshun.github.io/2019/03/okhttp-convert-to-kotlin/</guid>
      <description>&lt;p&gt;OkHttpがKotlin化をするというISSUEが立てられました。&#xA;&lt;a href=&#34;https://github.com/square/okhttp/issues/4723&#34;&gt;Upgrade OkHttp 3 to Kotlin and call it OkHttp 4&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;これの是非についてはさておき。現状、いくつかのJavaコードがKotlinへと置き換わっているので、それらのレビューで気になったこと、知らなかったこと、忘れがちなことを勉強がてらまとめたいと思います。&lt;/p&gt;&#xA;&lt;h2 id=&#34;checknotnullを使うかどうか&#34;&gt;checkNotNullを使うかどうか&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/square/okhttp/pull/4745#discussion_r266693078&#34;&gt;could also be &lt;em&gt;code&lt;/em&gt; no preference myself&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Kotlinの標準ライブラリに、&lt;a href=&#34;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/check-not-null.html&#34;&gt;checkNotNull&lt;/a&gt;があります。&#xA;これは、値がnullなら&lt;code&gt;IllegalStateException&lt;/code&gt;例外を投げるものです。&lt;/p&gt;&#xA;&lt;p&gt;以下のコードは同じ意味を持ちます。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; state = someState &lt;span style=&#34;color:#f92672&#34;&gt;?:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; IllegalStateException(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;State must be set beforehand&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; state = checkNotNull(someState) { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;State must be set beforehand&amp;#34;&lt;/span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ただ、&lt;code&gt;no preference myself&lt;/code&gt;と言っている通り、使うかどうかはプロジェクトで分かれそうです。&#xA;事前に使うかどうかを、決めておくと揉めなく良さそうだと思いました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;命名はtoが慣用的&#34;&gt;命名はto***が慣用的&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/square/okhttp/pull/4745#discussion_r266693257&#34;&gt;idiomatic naming would be toUrl on the Kotlin side&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;OkHttpでは、HttpUrlをURLに変換するためのメソッドとして&lt;code&gt;fun url(): URL&lt;/code&gt;が定義されています。しかし、&lt;code&gt;fun toUrl(): URL&lt;/code&gt;のほうがKotlinっぽいよと指摘がありました。&lt;/p&gt;&#xA;&lt;p&gt;確かに、言われてみるとAtoBクラス変換のメソッド名は、&lt;code&gt;to***&lt;/code&gt;が多い気がします。ただし、今回は下位互換を保つために、一旦この修正は入りませんでした。&lt;/p&gt;&#xA;&lt;h2 id=&#34;constを使う&#34;&gt;constを使う&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/square/okhttp/pull/4745#discussion_r266695491&#34;&gt;discussion link&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;constを使うと、Compile Time Constantsとなり、付けない場合に比べ効率的に動作します。ただし、プリミティブか、String型のみに有効です。&lt;/p&gt;&#xA;&lt;p&gt;より詳しくは&lt;a href=&#34;https://kotlinlang.org/docs/reference/properties.html#compile-time-constants&#34;&gt;公式ドキュメント&lt;/a&gt;で。&lt;/p&gt;&#xA;&lt;p&gt;constを付けたほうが良いことは知っていたのですが、公式ドキュメントを読んだことがなかったので勉強になりました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Android: RxJava &#43; OkHttpを使って401の処理をいい感じにする</title>
      <link>https://satoshun.github.io/2017/08/rx-okhttp-401/</link>
      <pubDate>Thu, 10 Aug 2017 00:00:00 +0000</pubDate>
      <guid>https://satoshun.github.io/2017/08/rx-okhttp-401/</guid>
      <description>&lt;p&gt;(この記事はRxJavaとOkHttpを知っている前提で進めていきます。またこの記事はRxJavaすごーいしたいだけの記事です。401のハンドリングのところは、RxJavaを使いたいだけのユースケースというか1例になります。)&lt;/p&gt;&#xA;&lt;p&gt;この記事のサンプルコードは &lt;a href=&#34;https://github.com/satoshun-example/authenticateSample&#34;&gt;ここ(Github)&lt;/a&gt;にあります。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;API周りの開発をしていて、401のときの処理をどうするかという永遠の課題があると思います。&#xA;クライアント側で頑張るとしたら以下の感じになるかなと思います。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;OkHttpのAuthenticatorを使い、そこで401のときのハンドリングをする。&lt;a href=&#34;https://github.com/square/okhttp/wiki/Recipes#handling-authentication&#34;&gt;公式ドキュメントのリンク&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;OkHttpのInterceptorを使い、そこで401のときのハンドリングをする。&lt;a href=&#34;https://github.com/square/okhttp/wiki/Interceptors&#34;&gt;公式ドキュメントのリンク&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;各処理(例えばRxJavaのTransformerとか)に401用の処理を埋め込んで、retryを掛ける。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;などがあるかなと(OkHttp、RxJavaを使うことを前提とする)&lt;/p&gt;&#xA;&lt;p&gt;このブログではOkHttpのAuthenticatorを使う方法で401の処理をいい感じにしたいと思います。&lt;/p&gt;&#xA;&lt;p&gt;またrefresh tokenは非同期、APIリクエストが必要であるとします。擬似コードはこんな感じです。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;fun refreshToken(): Observable&amp;lt;String&amp;gt; {&#xA;  return Observable.just(Credentials.basic(&amp;#34;sato&amp;#34;, &amp;#34;passwordhoge&amp;#34;))&#xA;      .doOnNext { println(&amp;#34;GET credential: $it&amp;#34;) } // Log出力&#xA;      .delay(2000, TimeUnit.MILLISECONDS)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;時間が掛かるんだなあくらいに思って下さい。&lt;/p&gt;&#xA;&lt;h2 id=&#34;401の処理を書いていく&#34;&gt;401の処理を書いていく&lt;/h2&gt;&#xA;&lt;p&gt;OkHttpのAuthenticatorは401のときにフックされます。なのでこの中で401ならrefresh tokenをし、結果をauthorization headerにセットして再リクエストをすれば良さそうです。&lt;/p&gt;&#xA;&lt;p&gt;ただここで1つ問題があります。それは、APIリクエストは並列に行われるということです。ということは、何も考えないとrefresh tokenが複数回叩かれてしまいます。なのでrefresh tokenをしているときは、後続の401はそれを待つようにしないといけません。&lt;/p&gt;&#xA;&lt;p&gt;愚直に表現するなら、refresh tokenをしていますよフラグをどこかに立てておいて、それがtrueなら待つ。falseならrefersh tokenをして、結果を待つといった処理になります。&#xA;並列にリクエストが行われるとしたら、マルチスレッドからコールされるのでsynchorizeなどの制御をする必要があり、めっちゃムズい。&lt;/p&gt;&#xA;&lt;h2 id=&#34;rxjavaを使ってみる&#34;&gt;RxJavaを使ってみる&lt;/h2&gt;&#xA;&lt;p&gt;上記の縛りをRxJavaのpublish + refCountを使うとめっちゃいい感じに表現できます。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; authenticator: Authenticator = &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Authenticator&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// ここがポイント。publishとrefCountを使う。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; tokenStream = refreshToken().publish().refCount()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// これだと駄目&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// private val tokenStream = refreshToken()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// ここは並列に呼ばれる&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;authenticate&lt;/span&gt;(route: Route, response: Response): Request? {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; credential = tokenStream.blockingFirst()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; response.request().newBuilder()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .header(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Authorization&amp;#34;&lt;/span&gt;, credential)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .build()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これだけです。synchronizeもフラグも出てこないコードになります。それでいて、並列に401リクエスト(authenticateメソッド)が呼ばれてもrefresh tokenリクエストは1つしか呼ばれません。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
