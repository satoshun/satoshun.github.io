<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rxjava3 on stsnブログ</title>
    <link>https://satoshun.github.io/tags/rxjava3/</link>
    <description>Recent content in Rxjava3 on stsnブログ</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Tue, 25 Jun 2019 12:38:16 +0000</lastBuildDate>
    <atom:link href="https://satoshun.github.io/tags/rxjava3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RxJava 3.xの開発が本格的に始まりました</title>
      <link>https://satoshun.github.io/2019/06/rxjava3-preview/</link>
      <pubDate>Mon, 24 Jun 2019 13:52:14 +0000</pubDate>
      <guid>https://satoshun.github.io/2019/06/rxjava3-preview/</guid>
      <description>&lt;p&gt;現状での差異をまとめておきます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;rxjava2との差異&#34;&gt;RxJava2との差異&lt;/h2&gt;&#xA;&lt;h3 id=&#34;readmeから&#34;&gt;READMEから&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ReactiveX/RxJava/blob/3.x/README.md&#34;&gt;README.md&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;RxJava2 との差分は以下のようになっています。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;fixed API mistakes and many limits of RxJava 2&#xA;&lt;ul&gt;&#xA;&lt;li&gt;RxJava2のいくつかのAPIのミス、制限を直している&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;intended to be a replacement for RxJava 2 with relatively few binary incompatible changes&#xA;&lt;ul&gt;&#xA;&lt;li&gt;APIに多少の変更があり、バイナリ互換がない&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;test and diagnostic support via test schedulers, test consumers and plugin hooks&#xA;&lt;ul&gt;&#xA;&lt;li&gt;テストのサポートの充実&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;3x-different-docsから&#34;&gt;3.x different docsから&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ReactiveX/RxJava/blob/3.x/docs/What&#39;s-different-in-3.0.md&#34;&gt;3.x different docs&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;asメソッドとtoメソッド&#34;&gt;asメソッドとtoメソッド&lt;/h4&gt;&#xA;&lt;p&gt;toメソッドはFunction型を引数から取っていた。しかし、あらゆるReactive型でFunction型を受け取っていたので、共通のConverterを作ることが出来なかった。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Obsevable.java&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;R&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; R &lt;span style=&#34;color:#a6e22e&#34;&gt;to&lt;/span&gt;(Function&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt; Observable&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, R&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; converter)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Single.java&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;R&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; R &lt;span style=&#34;color:#a6e22e&#34;&gt;to&lt;/span&gt;(Function&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt; Single&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, R&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; convert&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同じFunction型を引数に取るので、共通のクラスを作ることが出来ない。&lt;/p&gt;&#xA;&lt;p&gt;→ そこで、asメソッドが誕生&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
