<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>githubactions on stsnブログ</title>
    <link>https://satoshun.github.io/tags/githubactions/</link>
    <description>Recent content in githubactions on stsnブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Sun, 29 Aug 2021 13:18:37 +0000</lastBuildDate><atom:link href="https://satoshun.github.io/tags/githubactions/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GitHub Actions: Composite Run Stepsの簡単な使い方</title>
      <link>https://satoshun.github.io/2021/08/github-actions-composite-run-steps/</link>
      <pubDate>Sun, 29 Aug 2021 13:18:37 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2021/08/github-actions-composite-run-steps/</guid>
      <description>Composite Run Stepsを使うと、GitHub Actionsでactionを再利用する事ができます。
この記事では、同一リポジトリ内で使い回すパターンの、Composite Run Stepsについて紹介します。
最終的には、こんな感じになります
 composite run stepの定義側 composite run stepを使う側  ローカルcomposite run stepsの定義 今回は、Java11のセットアップをする、setup-java ステップを作ってみたいと思います。
最初に、次のパスにaction.ymlを作ります。
.github/actions/setup-java/action.yml
action.ymlは次のようになります。
name: &amp;#39;Java Setup&amp;#39; description: &amp;#39;Installs Java&amp;#39;  runs:  using: &amp;#39;composite&amp;#39;  steps:  - name: Install Java 11  uses: actions/setup-java@v2  with:  distribution: &amp;#39;adopt&amp;#39;  java-version: &amp;#39;11&amp;#39; 今回は1つのstepしか使っていませんが、stepsには複数stepを定義することが出来るので、処理を1箇所にまとめることが可能です。
setup-javaをworkflowから使う 次に、定義したsetup-javaを使ってみます。
jobs:  build:  runs-on: ubuntu-latest   steps:  - name: Checkout  uses: actions/checkout@v2   - name: Setup Java  uses: .</description>
    </item>
    
    <item>
      <title>GitHub Actions: 前のGitHub Actionの実行をキャンセルする</title>
      <link>https://satoshun.github.io/2021/04/github-actions-cancel-previous-tasks/</link>
      <pubDate>Sat, 03 Apr 2021 03:00:25 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2021/04/github-actions-cancel-previous-tasks/</guid>
      <description>Pushを複数回した場合などに、1つ前のGitHub Actionsの実行を止める方法の紹介です。
styfle/cancel-workflow-actionを使うことで実現できます。 READMEにも書いてあるのですが、以下のstepを追加するだけです。
steps: - name: Cancel Previous Runs  uses: styfle/cancel-workflow-action@0.8.0  with:  access_token: ${{ github.token }} GitHub Actionsは従量課金なので、上記のキャンセルをやっておくと、多少の節約になると思います。</description>
    </item>
    
    <item>
      <title>avocadoとGitHub Actionsを使って、Vector Drawableを最適化する</title>
      <link>https://satoshun.github.io/2020/05/android-avocado-with-github-actions/</link>
      <pubDate>Wed, 27 May 2020 03:52:50 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2020/05/android-avocado-with-github-actions/</guid>
      <description>Vector Drawableを最適化する avocadoと、GitHub Actions組み合わせた話です。
🥑avocado🥑? avocadoを使うことで、Vector Drawableを最適化することができます。使い方は簡単です。
avocado [file name] Vector Drawableによっては、結構最適化されます。
GitHub Actionsに組み込む 1週間単位でavocadoを実行して、PRを作るGitHub Actionsになります。
name: avocado  on:  schedule:  - cron: &amp;#39;0 0 * * 0&amp;#39;  jobs:  build:  runs-on: ubuntu-latest   steps:  - name: Checkout  uses: actions/checkout@v2   - name: Setup node  uses: actions/setup-node@v1  with:  node-version: &amp;#39;12&amp;#39;   - name: Setup avocado  run: npm install -g avocado   - name: Run avocado  run: find .</description>
    </item>
    
    <item>
      <title>GitHub Actions: AndroidプロジェクトのGradle周りの設定メモ</title>
      <link>https://satoshun.github.io/2020/05/github-actions-android/</link>
      <pubDate>Tue, 05 May 2020 06:11:48 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2020/05/github-actions-android/</guid>
      <description>GitHub Actionのスペック
 7Gメモリの2 CPU  こんな感じが良さそう org.gradle.daemon=false org.gradle.parallel=true org.gradle.jvmargs=-Xmx5120m org.gradle.workers.max=2  kotlin.incremental=false kotlin.compiler.execution.strategy=in-process  kapt.use.worker.api=false kapt.incremental.apt=false  android.databinding.incremental=false android.lifecycleProcessor.incremental=false  CatchUpアプリを参考にして、上の設定をCI実行時に ~/gradle/gradle.properites に配置するようにした  プロジェクト直下の gradle.properties より優先度が高いのでそうした   kaptの設定はいらないかもしれない  worker使わないほうが安定するんじゃないかなーと思って、falseにしてみた   incremental系は、全部offで良いと思っている  考慮したほうが良さそうなプロパティ  org.gradle.jvmarg  Xmx -XX:MaxPermSize -XX:+HeapDumpOnOutOfMemoryError   org.gradle.daemon org.gradle.parallel org.gradle.workers.max org.gradle.caching org.gradle.configureondemand kotlin.incremental kotlin.compiler.execution.strategy kotlin.parallel.tasks.in.project kapt.use.worker.api kapt.incremental.apt プロジェクト固有のやつ  android.databinding.incremental android.lifecycleProcessor.incremental=false firebasePerformanceInstrumentationEnabled    参考プロジェクト insetterライブラリ https://github.com/chrisbanes/insetter/tree/master/.github
JAVA_TOOL_OPTIONS: -Xmx5120m GRADLE_OPTS: -Dorg.</description>
    </item>
    
    <item>
      <title>GitHub Actionsでエミュレータテストをする</title>
      <link>https://satoshun.github.io/2019/12/github-actions-emulator-test/</link>
      <pubDate>Thu, 12 Dec 2019 12:25:11 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/12/github-actions-emulator-test/</guid>
      <description>GitHub Actionsでエミュレータでテストを回したかったので調べてみました。
結論、AutoDisposeでエミュレータでテストを行っていたので、それをアレンジする感じがいいと思います。詳しくは AutoDispose/ci.yml を見てください。
エミュレータテストをするスクリプト 特にキャッシュとかを考えないなら、以下のスクリプトで動きます。
name: CI on: [push, pull_request] jobs: build: name: JDK 1.8 runs-on: macOS-latest steps: - name: Checkout uses: actions/checkout@v1 - name: Install JDK 1.8 uses: actions/setup-java@v1 with: java-version: 1.8 - name: Install Android SDK uses: malinskiy/action-android/install-sdk@release/0.0.5 - name: Build project run: ./gradlew assemble --stacktrace - name: Run instrumentation tests uses: malinskiy/action-android/emulator-run-cmd@release/0.0.5 with: cmd: ./gradlew connectedCheck --stacktrace api: 25 tag: default abi: x86 malinskiy/action-androidという、便利GitHub Actionがあるので、それを呼び出すだけでおｋです。</description>
    </item>
    
    <item>
      <title>GitHub Actions: 最近使っているGitHub Actionsたち</title>
      <link>https://satoshun.github.io/2019/12/github-actions-first/</link>
      <pubDate>Sun, 08 Dec 2019 10:32:03 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/12/github-actions-first/</guid>
      <description>プライベート、仕事で使っているGitHub Actionsを雑に紹介します。
Release Drafter Release Drafterは、マージされたPRをもとに、いい感じにリリースノートを作ってくれます。
OSSのライブラリ開発で便利なので、最近導入しました。
Image Actions Image Actionsは、PRを出したときに、画像を圧縮をチャレンジし、小さくなった場合、圧縮したファイルをコミットしてくれます。
ただし、デザイナーがすでに圧縮してくれているなら、特に何もしてくれないので、弊アプリではあまり活躍してないです。
First Interaction First Interactionは、初めてPRを出した人に、定型文を出すことが出来るGitHub actionです。
「はじめてのPRありがとうございます🙏ここ見といてね」みたいなメッセージを出して使ってます。
Assign Author/Auto Assign Assign Author、Auto Assignは、自分にアサインしたり、均等にレビュワーを指定する事ができます。
レビューワーを分散させたかったので、使ってます。これ系のactionは他にもあるので、いろいろ調べるのも楽しそう。
まとめ  GitHub Actionsはいいぞ〜  </description>
    </item>
    
  </channel>
</rss>
