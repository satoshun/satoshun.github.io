<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Database on stsnブログ</title>
    <link>https://satoshun.github.io/tags/database/</link>
    <description>Recent content in Database on stsnブログ</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Sun, 19 Apr 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://satoshun.github.io/tags/database/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>データベース: RDBと第1~3正規形について</title>
      <link>https://satoshun.github.io/2015/04/normalization/</link>
      <pubDate>Sun, 19 Apr 2015 00:00:00 +0000</pubDate>
      <guid>https://satoshun.github.io/2015/04/normalization/</guid>
      <description>&lt;p&gt;正規形は, リレーショナルデータベース設計における理論の1つです. 正規化を行うことで, データの重複をなくし, 効率良くデータを保持することが出来ます.&lt;/p&gt;&#xA;&lt;p&gt;この記事では, リレーショナルデータベースについて説明し, 第1-3正規化について説明します.(BCNF, 第4-6正規化は次の記事で説明します)&lt;/p&gt;&#xA;&lt;h2 id=&#34;リレーショナルデータベースモデルrdbについて&#34;&gt;リレーショナルデータベースモデル(RDB)について&lt;/h2&gt;&#xA;&lt;p&gt;最初にリレーションについて説明します. リレーションは見出し(heading)と本体(body)からなります. 見出しは, SQLでいうところの属性に相当します. 例えば, 生徒なら下のようなデータを持つと考えられます.&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;学生番号&lt;/th&gt;&#xA;          &lt;th&gt;名前&lt;/th&gt;&#xA;          &lt;th&gt;年齢&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;001&lt;/td&gt;&#xA;          &lt;td&gt;田中&lt;/td&gt;&#xA;          &lt;td&gt;17&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;002&lt;/td&gt;&#xA;          &lt;td&gt;多田野&lt;/td&gt;&#xA;          &lt;td&gt;19&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;003&lt;/td&gt;&#xA;          &lt;td&gt;木下&lt;/td&gt;&#xA;          &lt;td&gt;19&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;004&lt;/td&gt;&#xA;          &lt;td&gt;西岡&lt;/td&gt;&#xA;          &lt;td&gt;18&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;上記表がリレーションの一例になります. &lt;code&gt;{学生番号, 名前, 年齢}&lt;/code&gt;が見出し, &lt;code&gt;{{001, 田中, 17}, {002, 多田野, 19}, {003, 木下, 19}, {004, 西岡, 18}}&lt;/code&gt;が本体になります. ここで&lt;code&gt;{}&lt;/code&gt;を使っているのは, リレーショナルにおける見出し, 本体はそれぞれタプルで表現されるためです. そのため各要素には順序が存在せず, 重複が許されません(重複があっても意味がない).&lt;/p&gt;&#xA;&lt;p&gt;ここで集合という言葉が出てきましたが, RDBは&lt;strong&gt;集合論&lt;/strong&gt; に基づいた理論です. データを集合で表現し, 集合演算を行いデータを操作します.&lt;/p&gt;&#xA;&lt;p&gt;データの表現の仕方が分かったので, 次にどのようにしてデータを操作するかについて説明します. SQLでいうところの, SELECT, INSERT, JOINなどのクエリに当たります. それらはクエリは, RDBの世界では集合演算で説明することができます.(OUTER JOINなど一部定義されていないものもあります)&lt;/p&gt;&#xA;&lt;p&gt;集合演算の有名なものには以下があります.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;直積(デカルト積): SQLの&lt;code&gt;FROM&lt;/code&gt;に相当. あるリレーションT1とT2のタプルを組み合わせたリレーションを返す&lt;/li&gt;&#xA;&lt;li&gt;差: 片方のリレーションにのみ含まれるリレーションを返す&lt;/li&gt;&#xA;&lt;li&gt;積: T1, T2, 両方のリレーションに含まれるリレーションを返す&lt;/li&gt;&#xA;&lt;li&gt;和: T1, T2のリレーションに含まれるタプルを含んだリレーションを返す&lt;/li&gt;&#xA;&lt;li&gt;射影: SQLの&lt;code&gt;SELECT hoge &lt;/code&gt;のhoge部分に相当. T1に含まれるタプルの属性を選択したリレーションを返す&lt;/li&gt;&#xA;&lt;li&gt;制限: SQLの&lt;code&gt;WHERE&lt;/code&gt;に相当. 指定した条件を満たすリレーションを返す&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;上記演算を使うことで, 適切なデータを取得することが出来ます.&lt;/p&gt;</description>
    </item>
    <item>
      <title>データベース: 履歴データについて</title>
      <link>https://satoshun.github.io/2015/04/history_data/</link>
      <pubDate>Thu, 09 Apr 2015 00:00:00 +0000</pubDate>
      <guid>https://satoshun.github.io/2015/04/history_data/</guid>
      <description>&lt;p&gt;RDBで履歴データを保持する方法についてまとめました. そもそも履歴データは, リレーショナルモデルとは相性が悪いので, これが正解!みたいなものはないです.&lt;/p&gt;&#xA;&lt;h2 id=&#34;履歴データとは&#34;&gt;履歴データとは?&lt;/h2&gt;&#xA;&lt;p&gt;スーパーの商品の値段のように, 時間の経過とともに属性の値が変化していくデータがあります. そのようなデータを履歴データと呼びます.&lt;/p&gt;&#xA;&lt;h2 id=&#34;フラグを付ける&#34;&gt;フラグを付ける&lt;/h2&gt;&#xA;&lt;p&gt;最初に一番オーソドックス?な, フラグをつけて管理する方法です.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;products&lt;/code&gt;テーブル&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;id&lt;/th&gt;&#xA;          &lt;th&gt;name&lt;/th&gt;&#xA;          &lt;th&gt;price&lt;/th&gt;&#xA;          &lt;th&gt;active&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;卵&lt;/td&gt;&#xA;          &lt;td&gt;200&lt;/td&gt;&#xA;          &lt;td&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2&lt;/td&gt;&#xA;          &lt;td&gt;卵&lt;/td&gt;&#xA;          &lt;td&gt;250&lt;/td&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;3&lt;/td&gt;&#xA;          &lt;td&gt;肉&lt;/td&gt;&#xA;          &lt;td&gt;100&lt;/td&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;activeなデータを取得するときは, &lt;code&gt;SELECT * FROM products WHERE active = 1;&lt;/code&gt; とします.&lt;/p&gt;&#xA;&lt;p&gt;この方法の利点はパッと見に分かりやすいことだと思います. しかし, この方法はバッドノウハウだとされています. 理由を以下にあげます.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;activeフラグはカーディナリティが低く効率が悪い&lt;/li&gt;&#xA;&lt;li&gt;テーブルサイズが時間ともに肥大化し, 検索効率が下がる恐れがある&lt;/li&gt;&#xA;&lt;li&gt;activeの更新は, アプリ側 もしくは, トリガーで制御しなければいけない&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;単純で分かりやすいですが, あまり使わないほうが良い方法のようです.&lt;/p&gt;&#xA;&lt;h2 id=&#34;範囲を指定する&#34;&gt;範囲を指定する&lt;/h2&gt;&#xA;&lt;p&gt;次は範囲を指定する方法です.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;products&lt;/code&gt;テーブル&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;id&lt;/th&gt;&#xA;          &lt;th&gt;name&lt;/th&gt;&#xA;          &lt;th&gt;price&lt;/th&gt;&#xA;          &lt;th&gt;start_date&lt;/th&gt;&#xA;          &lt;th&gt;end_date&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;卵&lt;/td&gt;&#xA;          &lt;td&gt;200&lt;/td&gt;&#xA;          &lt;td&gt;2015-03-22&lt;/td&gt;&#xA;          &lt;td&gt;2015-04-06&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2&lt;/td&gt;&#xA;          &lt;td&gt;卵&lt;/td&gt;&#xA;          &lt;td&gt;250&lt;/td&gt;&#xA;          &lt;td&gt;2015-04-07&lt;/td&gt;&#xA;          &lt;td&gt;9999-01-01&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;3&lt;/td&gt;&#xA;          &lt;td&gt;肉&lt;/td&gt;&#xA;          &lt;td&gt;100&lt;/td&gt;&#xA;          &lt;td&gt;2015-02-01&lt;/td&gt;&#xA;          &lt;td&gt;9999-01-01&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;activeなデータを取得するときは, &lt;code&gt;SELECT * FROM products WHERE NOW() BETWEEN start_date AND end_date;&lt;/code&gt; とします.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[ERROR] InnoDB: Cannot allocate memory for the buffer pool の対処法</title>
      <link>https://satoshun.github.io/2015/04/mysql_memory_error/</link>
      <pubDate>Tue, 07 Apr 2015 00:00:00 +0000</pubDate>
      <guid>https://satoshun.github.io/2015/04/mysql_memory_error/</guid>
      <description>&lt;p&gt;上記のエラーが出たらメモリ不足なので, スワップ領域を作るのが良いと思います.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;## swap領域の確認&#xA;$ swapon -s&#xA;Filename                Type        Size    Used    Priority&#xA;&#xA;## swap領域の確保&#xA;$ sudo dd if=/dev/zero of=/swapfile bs=1024 count=1024k&#xA;&#xA;## swap領域の作成&#xA;$ sudo mkswap /swapfile&#xA;&#xA;## swap領域の割り当て&#xA;$ sudo swapon /swapfile&#xA;&#xA;$ swapon -s&#xA;Filename                Type        Size    Used    Priority&#xA;/swapfile                               file        1048572 4320    -1&#xA;&#xA;$ free&#xA;             total       used       free     shared    buffers     cached&#xA;Mem:        760132     689248      70884       4672       7740      48944&#xA;-/+ buffers/cache:     632564     127568&#xA;Swap:      1048572      88556     960016&#xA;&#xA;## 再起動時にもswapを割り当てるように設定&#xA;$ sudo vi /etc/fstab&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これでおｋ.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
