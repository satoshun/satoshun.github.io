<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>api on stsnブログ</title>
    <link>https://satoshun.github.io/tags/api/</link>
    <description>Recent content in api on stsnブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Sun, 15 Mar 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://satoshun.github.io/tags/api/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>読んだ: Web API: The Good Parts</title>
      <link>https://satoshun.github.io/2015/03/webapi_the_good_parts/</link>
      <pubDate>Sun, 15 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2015/03/webapi_the_good_parts/</guid>
      <description>この記事には, 僕の主観, 解釈が入っています. 本のまとめというよりかは感想的なものです.
Web APIとは何か 使いやすく, 理解しやすく, 拡張性が高く設計する必要があります.
使いやすく: クライアントが苦労しない, 素直な実装が出来る 理解しやすく: 「エンドポイントが明確」, 「Twitterなどの他のWeb APIを参考にし, 慣習に従っている」. 拡張性が高く: インターフェースの変更はクライアントに影響するため, バージョニングなどを使うなど, クライアントに影響を与えにくい設計になっている 一般に公開するLSUD(Large Set of Unknown Developers)と, 自社内のサービスで使う, SSKD(Small Set of Unknown Developers)のどちらの用途で使うかで大きく2つに分けることが出来ます. SSKDの場合は, クライアントのコントロールがしやすいので, 世間の常識から外れた設計をしても大きな問題にはなりませんが, 理解のしやすさ がなくなってしまうので, SSKDでもちゃんとした設計をする必要があります.
エンドポイントの設計とリクエストの形式 HTTPにおける, エンドポイントはURIになります. URIはリソースを示します. 例えば, http://localhost/users なら, ホストlocalhostのユーザ一覧を指し示しています. さらに, ユーザIDが2のユーザを取得したいときは, http://localhost/users/2 とすれば直感的です. さらにさらに, ユーザIDが2のユーザの投稿一覧を取得したいときは, http://localhost/users/2/posts とすれば, 直感的です.
ここで, 上記の例ではデータを取得することにだけ, 注目していましたが, データを消去したい, 更新したいなどの機能も当然必要です. HTTPでは, methodを指定することで, それらの機能使い分けることが出来ます. よく使うmethodには, データを取得するGET, データを登録するPOST, データを更新するPUT, データを消去するDELETEがあります. 例えば, DELETE http://localhost/users/2 とすれば, ユーザIDが2のユーザを削除することが期待でき, PUT http://localhost/users/2 とすれば, ユーザIDが2のユーザの情報を更新することが期待されます.</description>
    </item>
    
  </channel>
</rss>
