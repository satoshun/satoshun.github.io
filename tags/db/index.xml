<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>db on stsnブログ</title>
    <link>https://satoshun.github.io/tags/db/</link>
    <description>Recent content in db on stsnブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Wed, 18 Mar 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://satoshun.github.io/tags/db/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>読んだ: 達人に学ぶDB設計 徹底指南書</title>
      <link>https://satoshun.github.io/2015/03/master_of_database/</link>
      <pubDate>Wed, 18 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2015/03/master_of_database/</guid>
      <description>この記事には僕の主観, 解釈が入っています. 本のまとめというよりかは, 感想的なものです.
データベースを制する者はシステムを制す システムを構築する時に, 要件定義をし, どのようにデータが必要, 保持するかを決定することはとても大切です. 拡張性が高く, 正しいデータ設計をすると, 要件修正があった時にも, 大きな変更をすることはありません. データ中心のアプローチは現在の主流です.
view(外部スキーマ)とmodel(論理スキーマ)を分離しておくことも大切です. 論理スキーマを正規化などの技術を使い, リレーショナル・データベースの基本に沿った設計をすることで, 外部スキーマで柔軟に組み合わせて使用することが出来ます.
論理設計と物理設計 論理設計は物理設計に先立って行われる必要があり, 論理設計は物理設計とは独立して設計することが出来ます.
論理設計では, エンティティ抽出が行われます. エンティティは要件定義に基づいて行われます. 例えば, 要件「ユーザがブログを投稿できる」があったとしたら，ユーザとブログがエンティティとして抽出できます. そして, 各エンティティがどのような属性(列)を持っているかを定義して, どのような関係(1対多になっているかなど)になっているかをER図などで示します.
物理設計では, パフォーマンス, キャパシティの2つの要素が仕様を満たすようにすることが大切です. キャパシティは, データファイル, インデックスファイル, システムファイル, 一時ファイル, ログファイル(トランザクション履歴的なもの)の5つのファイルがあり, それぞれのファイルがどれくらいのサイズになるかを見積もります. パフォーマンスは, TPS(Transaction Per Second)のスループットがどれくらい出れば良いかを設定し, CPU, メインメモリを見積もります.
冗長設計(RAID, レプリケーション), バックアップ設計(フル, 差分, 増分バックアップ)をし, 不測の事態でもデータがなくならないようにすることも大切です.
論理設計と正規化 ～なぜテーブルは分割する必要があるのか？ 正規化は, テーブルをどのように定義すればいいかのプラクティスです. 正規化をすることでデータの重複を防ぎ, データサイズを小さくし, データ不整合を防ぐことが出来ます. 正規化はRDSにおける, リファクタリングのような感じです.
正規化には, 第5まであります. テーブルを分割することで, データの重複を除去していきます. 詳しくはこちらが分かりやすいです.
まとめると, 正規化メリットは
データの重複を防ぐ データサイズを小さく保つことが出来る 正規化のノウハウは広く共有されているので, 他の人にも分かりやすいテーブル設計になりやすい ER図 ～複数のテーブルの関係を表現する 正規化をすると, 必然的にテーブルが増加していきます.</description>
    </item>
    
  </channel>
</rss>
