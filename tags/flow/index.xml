<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>flow on stsnブログ</title>
    <link>https://satoshun.github.io/tags/flow/</link>
    <description>Recent content in flow on stsnブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Sat, 30 Jan 2021 07:20:42 +0000</lastBuildDate><atom:link href="https://satoshun.github.io/tags/flow/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kotlin: RxJava -&gt; Coroutineへの置き換えに使えるMigration.ktの紹介</title>
      <link>https://satoshun.github.io/2021/01/coroutine-migration-from-rxjava/</link>
      <pubDate>Sat, 30 Jan 2021 07:20:42 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2021/01/coroutine-migration-from-rxjava/</guid>
      <description>Kotlin Coroutineには Migration.kt が用意されており、RxJavaからCoroutineへの置き換えを手伝ってくれます。この記事では、どのように使うかを説明します。
 例として、次のRxJavaを使ったクラスがあるとします。
import io.reactivex.Observable  class TestRepository {  fun getUser(): Observable&amp;lt;User&amp;gt; {  ...  } } これは、次のように使うことが出来ます。
val disposble = repository.getUser()  .subscribeOn(Schedulers.io())  .subscribe(  { println(it) },  { println(it) }  ) ... このコードを、Coroutineに置き換えていきます。
まず、TestRepositoryクラスのRxJava部分をCoroutineのFlowにします。
import kotlinx.coroutines.flow.Flow  private class TestRepository {  fun getUser(): Flow&amp;lt;User&amp;gt; {  ...  } } そうすると、使っている側のコードでコンパイルエラーになります。なぜなら、Flow自体には、subscribeOnなどの関数が直接実装されていないためです。
しかし、Flowには拡張関数として、subscribeOnなどの関数が定義されています。なので、IDEの自動補完を使いimportすることで、一部、コンパイルエラーを解消することが出来ます。
import kotlinx.coroutines.flow.Flow import kotlinx.coroutines.flow.subscribe import kotlinx.coroutines.flow.subscribeOn  val disposble = repository.</description>
    </item>
    
    <item>
      <title>Kotlin: FlowのflowOnオペレータの挙動</title>
      <link>https://satoshun.github.io/2020/01/coroutine-flowon/</link>
      <pubDate>Mon, 13 Jan 2020 11:47:10 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2020/01/coroutine-flowon/</guid>
      <description>CoroutineのFlowにはflowOnオペレータが定義されており、実行コンテキストを変更することが出来ます。
この記事はRxJava2のsubscribeOnとの挙動の違いを見ていきたいと思います。
動かしてみる まずは、Flowから。
withContext(Dispatchers.Main) {  flowOf(1)  .map {  // Dispatchers.Defaultで動く  println(&amp;#34;${Thread.currentThread()}&amp;#34;)  it  }  .flowOn(Dispatchers.Default)  .map {  // Dispatchers.Mainで動く  println(&amp;#34;${Thread.currentThread()}&amp;#34;)  it  }  .collect {  // Dispatchers.Mainで動く  println(&amp;#34;${Thread.currentThread()}&amp;#34;)  } } flowOnの上部（upstream)では、Dispatchers.Defaultで動き、下部（downstream)では、flowOnの影響を受けていないことが分かります。flowOnはdownstreamに影響しないため、このような動作になります。
次にRxJavaです。
Single  .just(1)  .map {  // Schedulers.io上で動く  println(&amp;#34;${Thread.currentThread()}&amp;#34;)  it  }  .subscribeOn(Schedulers.io())  .map {  // Schedulers.io上で動く  println(&amp;#34;${Thread.</description>
    </item>
    
    <item>
      <title>Kotlin: FlowのBufferの指定について</title>
      <link>https://satoshun.github.io/2019/08/flow-buffer/</link>
      <pubDate>Sat, 03 Aug 2019 23:37:02 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/08/flow-buffer/</guid>
      <description>CoroutineのFlowにはBufferを指定することができます。Bufferの指定によってどのように動作が変わるかを試してみました。
この記事は、少しFlowを触ったことあるぞ！って言う人向けになります。また、検証はCoroutine 1.3.0-RCで行っております。
Bufferの種類 Bufferの種類は5つあります。
 UNLIMITED RENDEZVOUS CONFLATED BUFFERED 50、100などの、具体的な値  実質、BUFFEREDと同じ挙動をする    検証コード // flowストリームの作成 val f = flow {  repeat(100) {  delay(1)  emit(&amp;#34;$it&amp;#34;)  } }  // observeする lifecycleScope.launch {  f  .buffer(...) ここでBufferを指定する  .collect {  delay(100)  Log.d(&amp;#34;t4&amp;#34;, &amp;#34;$it&amp;#34;)  } } このコードは、まず最初に、flowメソッドを使って、Flowストリームを作ります。これをこの記事ではProducer（生産者）と呼びます。このProducerは1つの値を送るのに約delay(1)かかります。なので、処理に約1msかかります。
次に、作ったflowをobserveします。observeする側をConsumer（消費者）と呼びます。Consumerではdelay(100)しているので、処理に約100msかかります。
これは、次の関係を作り出しています
 Consumerの処理時間 &amp;gt; Producerの処理時間  この状態で、Bufferを指定したらどのように挙動が変わるかを見ていきます。
UNLIMITED f  .buffer(Channel.UNLIMITED)  .collect {  delay(100)  Log.</description>
    </item>
    
    <item>
      <title>ConstraintLayout Flowの紹介</title>
      <link>https://satoshun.github.io/2019/04/constraintlayout-flow/</link>
      <pubDate>Sun, 28 Apr 2019 11:13:20 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/04/constraintlayout-flow/</guid>
      <description>ConstraintLayoutの2.0.0 alpha 5にFlow Virtual Layoutが導入されました🎉 Flowを使うことで、対象のViewを様々なルールで並べることができます。
メリットとしては、次のようなものがあります。
 Viewの階層をフラットに保つことが出来る Flowは普通のViewのように扱う事ができる MotionLayoutと相性が良い  では、どのように書くのかを見ていきます。
 1. 配置する方向を決める android:orientationから、horizontal or verticalを指定できます。
&amp;lt;androidx.constraintlayout.widget.ConstraintLayout  android:layout_width=&amp;#34;match_parent&amp;#34;  android:layout_height=&amp;#34;match_parent&amp;#34;&amp;gt;   &amp;lt;androidx.constraintlayout.helper.widget.Flow  android:id=&amp;#34;@+id/flow&amp;#34;  android:layout_width=&amp;#34;0dp&amp;#34;  android:layout_height=&amp;#34;0dp&amp;#34;  android:orientation=&amp;#34;horizontal&amp;#34;  android:background=&amp;#34;@android:color/white&amp;#34;  app:layout_constraintBottom_toBottomOf=&amp;#34;parent&amp;#34;  app:layout_constraintEnd_toEndOf=&amp;#34;parent&amp;#34;  app:layout_constraintStart_toStartOf=&amp;#34;parent&amp;#34;  app:layout_constraintTop_toTopOf=&amp;#34;parent&amp;#34; /&amp;gt;   ... これはorientationにhorizontalを持ちます。また、通常のViewのように各constraintsを指定し、配置することができます。
2. wrapModeを決める flow_wrapModeで指定することができます。
wrapModeでは、どのようにViewを並べるかを指定でき、3種類のmodeがあります。
 none  単純にsingle lineに並べる   chain  単純に順番に配置していく。その行（列）に収まらない場合は次の行（列）に配置する   aligned  各要素を整列するように配置していく。テーブルのようなイメージ     &amp;lt;androidx.</description>
    </item>
    
  </channel>
</rss>
