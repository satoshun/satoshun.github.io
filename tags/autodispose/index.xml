<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Autodispose on stsnブログ</title>
    <link>https://satoshun.github.io/tags/autodispose/</link>
    <description>Recent content in Autodispose on stsnブログ</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Thu, 04 May 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://satoshun.github.io/tags/autodispose/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RxJava: AutoDisposeで自動的にdisposeする</title>
      <link>https://satoshun.github.io/2017/05/rx-autodispose/</link>
      <pubDate>Thu, 04 May 2017 00:00:00 +0000</pubDate>
      <guid>https://satoshun.github.io/2017/05/rx-autodispose/</guid>
      <description>&lt;p&gt;非同期処理を開始した後に, Activityのライフサイクルなどに連動して非同期処理をキャンセルする必要があります.&lt;/p&gt;&#xA;&lt;p&gt;RxJavaでは, Disposableからキャンセルの処理を行います.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Disposable d;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; myObservable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;(a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; b)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .&lt;span style=&#34;color:#a6e22e&#34;&gt;subscribe&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onPause&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    d.&lt;span style=&#34;color:#a6e22e&#34;&gt;dispose&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このコードだと, ストリームの定義と, キャンセルのコードが離れ過ぎているため, 可読性が低いです.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/uber/AutoDispose&#34;&gt;AutoDispose&lt;/a&gt;を使うことで, コード離れすぎ問題を解決することが出来ます.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    myObservable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .&lt;span style=&#34;color:#a6e22e&#34;&gt;to&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ObservableScoper&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .&lt;span style=&#34;color:#a6e22e&#34;&gt;subscribe&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このような感じで, ストリームの定義の中にAutoDisposeが提供している&lt;code&gt;Scoper&lt;/code&gt;を埋め込むことで自動的に&lt;code&gt;dispose&lt;/code&gt;してくれます.&lt;/p&gt;&#xA;&lt;p&gt;また, &lt;code&gt;Scoper&lt;/code&gt;は, カスタムで柔軟に定義することが出来ます. 例えば,&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Activityのライフサイクル&lt;/li&gt;&#xA;&lt;li&gt;Fragmentのライフサイクル&lt;/li&gt;&#xA;&lt;li&gt;RecyclerViewのライフサイクル&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;など, こちら側で実装することが出来ます(実装の手間は少し掛かります)&lt;/p&gt;&#xA;&lt;p&gt;これで, Disposableをマニュアルで呼び出すことから解放されます!&lt;/p&gt;&#xA;&lt;h2 id=&#34;error-proneと組み合わせると最強&#34;&gt;Error Proneと組み合わせると最強&lt;/h2&gt;&#xA;&lt;p&gt;とはいえ, そもそも&lt;code&gt;Scope&lt;/code&gt;をストリームに埋め込むのを忘れる問題があります(だって人間だもの)&lt;/p&gt;&#xA;&lt;p&gt;そこで, Googleが出した&lt;a href=&#34;http://errorprone.info/&#34;&gt;Error Prone&lt;/a&gt;を組み合わせることで埋め込むのを忘れる問題を解決出来ます.&lt;/p&gt;&#xA;&lt;p&gt;Error ProneはJavaの間違った使い方を教えてくれる &lt;code&gt;Linter&lt;/code&gt;のようなものです. これを使うと,&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    myObservable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;(a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; b)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .&lt;span style=&#34;color:#a6e22e&#34;&gt;subscribe&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;と, &lt;code&gt;Scope&lt;/code&gt;の指定を忘れた時に, エラーを出力してくれます.&#xA;なぜかというと, RxJava2は &lt;code&gt;@CheckReturnValue&lt;/code&gt;が返り値についているため, それをError Proneが検知してくれるためです.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
