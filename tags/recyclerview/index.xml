<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>recyclerview on stsnブログ</title>
    <link>https://satoshun.github.io/tags/recyclerview/</link>
    <description>Recent content in recyclerview on stsnブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Fri, 15 May 2020 13:25:48 +0000</lastBuildDate><atom:link href="https://satoshun.github.io/tags/recyclerview/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Android: ConstraintLayoutの子にRecyclerViewを配置して、Match Constraintsを設定すると良くない挙動をする</title>
      <link>https://satoshun.github.io/2020/05/recyclerview-with-match-constraints/</link>
      <pubDate>Fri, 15 May 2020 13:25:48 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2020/05/recyclerview-with-match-constraints/</guid>
      <description>備忘録です。
次のようなレイアウトは良くないぞという話です。
&amp;lt;androidx.constraintlayout.widget.ConstraintLayout android:layout_width=&amp;#34;match_parent&amp;#34; android:layout_height=&amp;#34;wrap_content&amp;#34;&amp;gt; &amp;lt;androidx.recyclerview.widget.RecyclerView android:id=&amp;#34;@+id/recycler&amp;#34; android:layout_width=&amp;#34;0dp&amp;#34; android:layout_height=&amp;#34;wrap_content&amp;#34; app:layout_constraintEnd_toEndOf=&amp;#34;parent&amp;#34; app:layout_constraintStart_toStartOf=&amp;#34;parent&amp;#34; app:layout_constraintTop_toTopOf=&amp;#34;parent&amp;#34; /&amp;gt; &amp;lt;/androidx.constraintlayout.widget.ConstraintLayout&amp;gt; 今回の例では、LinearLayoutManagerをLayoutManagerとして使っています。他のLayoutManagerの場合、どういう挙動をするか分かりません。 また、ConstraintLayout 2.0.0-beta06、RecyclerView 1.1.0で試しています。
どんな挙動をするか? このレイアウトはファーストビューのタイミングで、すべてのアイテムをバインドしようとします。
例えば500個のRecyclerViewアイテムがあったときに、画面に収まるかどうかに関わらず500個のバインドが走ります。
with(recycler) { // 横方向のLinearLayoutManager  layoutManager = LinearLayoutManager( this@ConstraintMatchConstraintsActivity, RecyclerView.HORIZONTAL, false ) // 500個のアイテムを生成  adapter = SampleAdapter().apply { submitList((0..500).map { &amp;#34;$index$it&amp;#34; }) } } private class SampleAdapter : ListAdapter&amp;lt;String, RecyclerView.ViewHolder&amp;gt;(...) { ... override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) { println(getItem(position)) // ここが、0 ~ 500まで表示される  } } 500個全部に対して、最初にバインドが走るのは非効率なので良くないです😂</description>
    </item>
    
    <item>
      <title>Android: Groupieの内部でやっている差分更新周りの話</title>
      <link>https://satoshun.github.io/2019/11/groupie-diffutil/</link>
      <pubDate>Thu, 21 Nov 2019 12:35:25 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/11/groupie-diffutil/</guid>
      <description>GroupieにはGroupAdapter#updateメソッドという便利なメソッドがあります。
この記事ではupdateメソッドをコールした時に、どのように差分更新されるかを、簡単な説明と実際に動かしてみて見ていきます。
そもそもRecyclerViewの差分更新って何よ RecyclerViewでは、DiffUtil.Callbackクラスを実装することで、前のAdapterの状態と、新しいAdapterの状態の差分を計算することが出来ます。その計算結果をもとに、RecyclerViewでは効率的にViewを更新してくれます。またいい感じにアニメーションを実行してくれます。
Groupieでは、内部でDiffUtil.Callbackを実装したDiffCallbackクラスがあり、そのクラスをもとに差分更新が行われます。
DiffCallbackクラスの実装を見ていく まずはareItemsTheSameメソッドから。areItemsTheSameメソッドは、Itemが同一かどうかを判定します。
@Override public boolean areItemsTheSame(int oldItemPosition, int newItemPosition) { Item oldItem = GroupUtils.getItem(oldGroups, oldItemPosition); Item newItem = GroupUtils.getItem(newGroups, newItemPosition); return newItem.isSameAs(oldItem); } まず、1つ前のItemと新しいItemを取ってきて、newItem.isSameAs(oldItem);をコールしています。
isSameAsメソッドは次の定義になっています。
public boolean isSameAs(Item other) { if (getViewType() != other.getViewType()) { return false; } return getId() == other.getId(); } ItemのviewTypeが等しい かつ Idが等しい場合にtrueを返します。
Idは、Itemクラスのコンストラクタから与えることが出来ます。
protected Item(long id) { this.id = id; } なので、GroupAdapterがupdateされる可能性があるなら、適切なIdを渡すのが良いです。 例えば、Userクラス的なものがあって、運良くUserを一意に判定できるidが定義されていたら、それを渡すと良いと思います。
 次に、areContentsTheSameメソッド。areContentsTheSameメソッドは、このItemの内容が同じかどうかを判定します。
@Override public boolean areContentsTheSame(int oldItemPosition, int newItemPosition) { Item oldItem = GroupUtils.</description>
    </item>
    
  </channel>
</rss>
